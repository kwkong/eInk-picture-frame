
src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000d50  00000de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800140  00800140  00000e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000588  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ce59  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f66  00000000  00000000  0000e275  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eb2  00000000  00000000  000101db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001258  00000000  00000000  00013090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002696  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006d96  00000000  00000000  0001697e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001d714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__dtors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_6>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_16>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_18>
  4c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_19>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
  68:	99 00       	.word	0x0099	; ????
  6a:	46 02       	muls	r20, r22

0000006c <__ctors_end>:
  6c:	9f 00       	.word	0x009f	; ????

0000006e <__dtors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	11 e0       	ldi	r17, 0x01	; 1
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	b1 e0       	ldi	r27, 0x01	; 1
  80:	e0 e5       	ldi	r30, 0x50	; 80
  82:	fd e0       	ldi	r31, 0x0D	; 13
  84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a0 34       	cpi	r26, 0x40	; 64
  8c:	b1 07       	cpc	r27, r17
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	a0 e4       	ldi	r26, 0x40	; 64
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	a0 3f       	cpi	r26, 0xF0	; 240
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	c6 e3       	ldi	r28, 0x36	; 54
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
  a8:	21 97       	sbiw	r28, 0x01	; 1
  aa:	fe 01       	movw	r30, r28
  ac:	0e 94 67 04 	call	0x8ce	; 0x8ce <__tablejump2__>
  b0:	c4 33       	cpi	r28, 0x34	; 52
  b2:	d1 07       	cpc	r29, r17
  b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
  b6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <main>
  ba:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__do_global_dtors>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	a8 95       	wdr
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
  e2:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  f0:	26 e0       	ldi	r18, 0x06	; 6
  f2:	40 e8       	ldi	r20, 0x80	; 128
  f4:	55 e2       	ldi	r21, 0x25	; 37
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	86 e4       	ldi	r24, 0x46	; 70
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN14HardwareSerial5beginEmh>
  //pinMode(4, OUTPUT);
  //digitalWrite(4, HIGH);
  //delay(1000);
  //loraSerial.begin(9600);
  Serial.begin(9600);
  Serial.println("init");
 102:	66 e0       	ldi	r22, 0x06	; 6
 104:	71 e0       	ldi	r23, 0x01	; 1
 106:	86 e4       	ldi	r24, 0x46	; 70
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN5Print7printlnEPKc>
  delay(1000);
 10e:	68 ee       	ldi	r22, 0xE8	; 232
 110:	73 e0       	ldi	r23, 0x03	; 3
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0c 94 47 03 	jmp	0x68e	; 0x68e <delay>

0000011a <loop>:
}

void loop()
{
	Serial.println("Going to sleep now");
 11a:	6b e0       	ldi	r22, 0x0B	; 11
 11c:	71 e0       	ldi	r23, 0x01	; 1
 11e:	86 e4       	ldi	r24, 0x46	; 70
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN5Print7printlnEPKc>
	delay(500);
 126:	64 ef       	ldi	r22, 0xF4	; 244
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0c 94 47 03 	jmp	0x68e	; 0x68e <delay>

00000132 <_GLOBAL__sub_I_rxTimeout>:

#define F_CPU 8000000

unsigned long rxTimeout = 0;
//SoftwareSerial loraSerial(2,3);
String message;
 132:	62 e3       	ldi	r22, 0x32	; 50
 134:	71 e0       	ldi	r23, 0x01	; 1
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0c 94 2f 04 	jmp	0x85e	; 0x85e <_ZN6StringC1EPKc>

0000013e <_GLOBAL__sub_D_rxTimeout>:
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0c 94 be 03 	jmp	0x77c	; 0x77c <_ZN6StringD1Ev>

00000146 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 146:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 148:	91 8d       	ldd	r25, Z+25	; 0x19
 14a:	22 8d       	ldd	r18, Z+26	; 0x1a
 14c:	89 2f       	mov	r24, r25
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	80 5c       	subi	r24, 0xC0	; 192
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	82 1b       	sub	r24, r18
 156:	91 09       	sbc	r25, r1
}
 158:	8f 73       	andi	r24, 0x3F	; 63
 15a:	99 27       	eor	r25, r25
 15c:	08 95       	ret

0000015e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 15e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 160:	91 8d       	ldd	r25, Z+25	; 0x19
 162:	82 8d       	ldd	r24, Z+26	; 0x1a
 164:	98 17       	cp	r25, r24
 166:	31 f0       	breq	.+12     	; 0x174 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 168:	82 8d       	ldd	r24, Z+26	; 0x1a
 16a:	e8 0f       	add	r30, r24
 16c:	f1 1d       	adc	r31, r1
 16e:	85 8d       	ldd	r24, Z+29	; 0x1d
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 178:	08 95       	ret

0000017a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 17a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 17c:	91 8d       	ldd	r25, Z+25	; 0x19
 17e:	82 8d       	ldd	r24, Z+26	; 0x1a
 180:	98 17       	cp	r25, r24
 182:	61 f0       	breq	.+24     	; 0x19c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 184:	82 8d       	ldd	r24, Z+26	; 0x1a
 186:	df 01       	movw	r26, r30
 188:	a8 0f       	add	r26, r24
 18a:	b1 1d       	adc	r27, r1
 18c:	5d 96       	adiw	r26, 0x1d	; 29
 18e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 190:	92 8d       	ldd	r25, Z+26	; 0x1a
 192:	9f 5f       	subi	r25, 0xFF	; 255
 194:	9f 73       	andi	r25, 0x3F	; 63
 196:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1a0:	08 95       	ret

000001a2 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 1a2:	fc 01       	movw	r30, r24
 1a4:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 1a6:	44 8d       	ldd	r20, Z+28	; 0x1c
 1a8:	25 2f       	mov	r18, r21
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	84 2f       	mov	r24, r20
 1ae:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 1b0:	82 1b       	sub	r24, r18
 1b2:	93 0b       	sbc	r25, r19
 1b4:	54 17       	cp	r21, r20
 1b6:	10 f0       	brcs	.+4      	; 0x1bc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 1b8:	cf 96       	adiw	r24, 0x3f	; 63
 1ba:	08 95       	ret
  return tail - head - 1;
 1bc:	01 97       	sbiw	r24, 0x01	; 1
}
 1be:	08 95       	ret

000001c0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1c0:	8c e3       	ldi	r24, 0x3C	; 60
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	89 2b       	or	r24, r25
 1c6:	49 f0       	breq	.+18     	; 0x1da <_Z14serialEventRunv+0x1a>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	89 2b       	or	r24, r25
 1ce:	29 f0       	breq	.+10     	; 0x1da <_Z14serialEventRunv+0x1a>
 1d0:	0e 94 3c 02 	call	0x478	; 0x478 <_Z17Serial0_availablev>
 1d4:	81 11       	cpse	r24, r1
 1d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 1da:	08 95       	ret

000001dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1dc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1de:	84 8d       	ldd	r24, Z+28	; 0x1c
 1e0:	df 01       	movw	r26, r30
 1e2:	a8 0f       	add	r26, r24
 1e4:	b1 1d       	adc	r27, r1
 1e6:	a3 5a       	subi	r26, 0xA3	; 163
 1e8:	bf 4f       	sbci	r27, 0xFF	; 255
 1ea:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1ec:	84 8d       	ldd	r24, Z+28	; 0x1c
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	8f 73       	andi	r24, 0x3F	; 63
 1f4:	99 27       	eor	r25, r25
 1f6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 1f8:	a6 89       	ldd	r26, Z+22	; 0x16
 1fa:	b7 89       	ldd	r27, Z+23	; 0x17
 1fc:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 1fe:	a0 89       	ldd	r26, Z+16	; 0x10
 200:	b1 89       	ldd	r27, Z+17	; 0x11
 202:	8c 91       	ld	r24, X
 204:	83 70       	andi	r24, 0x03	; 3
 206:	80 64       	ori	r24, 0x40	; 64
 208:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 20a:	93 8d       	ldd	r25, Z+27	; 0x1b
 20c:	84 8d       	ldd	r24, Z+28	; 0x1c
 20e:	98 13       	cpse	r25, r24
 210:	06 c0       	rjmp	.+12     	; 0x21e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 212:	02 88       	ldd	r0, Z+18	; 0x12
 214:	f3 89       	ldd	r31, Z+19	; 0x13
 216:	e0 2d       	mov	r30, r0
 218:	80 81       	ld	r24, Z
 21a:	8f 7d       	andi	r24, 0xDF	; 223
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
  _written = true;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 232:	9b 8d       	ldd	r25, Y+27	; 0x1b
 234:	8c 8d       	ldd	r24, Y+28	; 0x1c
 236:	98 13       	cpse	r25, r24
 238:	05 c0       	rjmp	.+10     	; 0x244 <_ZN14HardwareSerial5writeEh+0x24>
 23a:	e8 89       	ldd	r30, Y+16	; 0x10
 23c:	f9 89       	ldd	r31, Y+17	; 0x11
 23e:	80 81       	ld	r24, Z
 240:	85 fd       	sbrc	r24, 5
 242:	26 c0       	rjmp	.+76     	; 0x290 <_ZN14HardwareSerial5writeEh+0x70>
 244:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 246:	0b 8d       	ldd	r16, Y+27	; 0x1b
 248:	10 e0       	ldi	r17, 0x00	; 0
 24a:	0f 5f       	subi	r16, 0xFF	; 255
 24c:	1f 4f       	sbci	r17, 0xFF	; 255
 24e:	0f 73       	andi	r16, 0x3F	; 63
 250:	11 27       	eor	r17, r17
 252:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 254:	8c 8d       	ldd	r24, Y+28	; 0x1c
 256:	e8 12       	cpse	r14, r24
 258:	0c c0       	rjmp	.+24     	; 0x272 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	07 fc       	sbrc	r0, 7
 25e:	fa cf       	rjmp	.-12     	; 0x254 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 260:	e8 89       	ldd	r30, Y+16	; 0x10
 262:	f9 89       	ldd	r31, Y+17	; 0x11
 264:	80 81       	ld	r24, Z
 266:	85 ff       	sbrs	r24, 5
 268:	f5 cf       	rjmp	.-22     	; 0x254 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 26a:	ce 01       	movw	r24, r28
 26c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 270:	f1 cf       	rjmp	.-30     	; 0x254 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 272:	8b 8d       	ldd	r24, Y+27	; 0x1b
 274:	fe 01       	movw	r30, r28
 276:	e8 0f       	add	r30, r24
 278:	f1 1d       	adc	r31, r1
 27a:	e3 5a       	subi	r30, 0xA3	; 163
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 280:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 282:	f8 94       	cli
    _tx_buffer_head = i;
 284:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 286:	ea 89       	ldd	r30, Y+18	; 0x12
 288:	fb 89       	ldd	r31, Y+19	; 0x13
 28a:	80 81       	ld	r24, Z
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 290:	9f b7       	in	r25, 0x3f	; 63
 292:	f8 94       	cli
      *_udr = c;
 294:	ee 89       	ldd	r30, Y+22	; 0x16
 296:	ff 89       	ldd	r31, Y+23	; 0x17
 298:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 29a:	e8 89       	ldd	r30, Y+16	; 0x10
 29c:	f9 89       	ldd	r31, Y+17	; 0x11
 29e:	80 81       	ld	r24, Z
 2a0:	83 70       	andi	r24, 0x03	; 3
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2a6:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	ff 90       	pop	r15
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 2c0:	88 8d       	ldd	r24, Y+24	; 0x18
 2c2:	88 23       	and	r24, r24
 2c4:	c9 f0       	breq	.+50     	; 0x2f8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 2c6:	ea 89       	ldd	r30, Y+18	; 0x12
 2c8:	fb 89       	ldd	r31, Y+19	; 0x13
 2ca:	80 81       	ld	r24, Z
 2cc:	85 fd       	sbrc	r24, 5
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <_ZN14HardwareSerial5flushEv+0x20>
 2d0:	a8 89       	ldd	r26, Y+16	; 0x10
 2d2:	b9 89       	ldd	r27, Y+17	; 0x11
 2d4:	8c 91       	ld	r24, X
 2d6:	86 fd       	sbrc	r24, 6
 2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	07 fc       	sbrc	r0, 7
 2de:	f5 cf       	rjmp	.-22     	; 0x2ca <_ZN14HardwareSerial5flushEv+0x10>
 2e0:	80 81       	ld	r24, Z
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	f2 cf       	rjmp	.-28     	; 0x2ca <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 2e6:	a8 89       	ldd	r26, Y+16	; 0x10
 2e8:	b9 89       	ldd	r27, Y+17	; 0x11
 2ea:	8c 91       	ld	r24, X
 2ec:	85 ff       	sbrs	r24, 5
 2ee:	ed cf       	rjmp	.-38     	; 0x2ca <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2f6:	e7 cf       	rjmp	.-50     	; 0x2c6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 2fe:	cf 92       	push	r12
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	6a 01       	movw	r12, r20
 310:	7b 01       	movw	r14, r22
 312:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 314:	e8 89       	ldd	r30, Y+16	; 0x10
 316:	f9 89       	ldd	r31, Y+17	; 0x11
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 31c:	41 15       	cp	r20, r1
 31e:	51 4e       	sbci	r21, 0xE1	; 225
 320:	61 05       	cpc	r22, r1
 322:	71 05       	cpc	r23, r1
 324:	b1 f0       	breq	.+44     	; 0x352 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	79 e0       	ldi	r23, 0x09	; 9
 32a:	8d e3       	ldi	r24, 0x3D	; 61
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a7 01       	movw	r20, r14
 330:	96 01       	movw	r18, r12
 332:	0e 94 45 04 	call	0x88a	; 0x88a <__udivmodsi4>
 336:	da 01       	movw	r26, r20
 338:	c9 01       	movw	r24, r18
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	a1 09       	sbc	r26, r1
 33e:	b1 09       	sbc	r27, r1
 340:	b6 95       	lsr	r27
 342:	a7 95       	ror	r26
 344:	97 95       	ror	r25
 346:	87 95       	ror	r24
 348:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 34a:	21 15       	cp	r18, r1
 34c:	80 e1       	ldi	r24, 0x10	; 16
 34e:	38 07       	cpc	r19, r24
 350:	a8 f0       	brcs	.+42     	; 0x37c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 352:	e8 89       	ldd	r30, Y+16	; 0x10
 354:	f9 89       	ldd	r31, Y+17	; 0x11
 356:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 358:	60 e8       	ldi	r22, 0x80	; 128
 35a:	74 e8       	ldi	r23, 0x84	; 132
 35c:	8e e1       	ldi	r24, 0x1E	; 30
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	a7 01       	movw	r20, r14
 362:	96 01       	movw	r18, r12
 364:	0e 94 45 04 	call	0x88a	; 0x88a <__udivmodsi4>
 368:	da 01       	movw	r26, r20
 36a:	c9 01       	movw	r24, r18
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	a1 09       	sbc	r26, r1
 370:	b1 09       	sbc	r27, r1
 372:	b6 95       	lsr	r27
 374:	a7 95       	ror	r26
 376:	97 95       	ror	r25
 378:	87 95       	ror	r24
 37a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 37c:	ec 85       	ldd	r30, Y+12	; 0x0c
 37e:	fd 85       	ldd	r31, Y+13	; 0x0d
 380:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 382:	ee 85       	ldd	r30, Y+14	; 0x0e
 384:	ff 85       	ldd	r31, Y+15	; 0x0f
 386:	20 83       	st	Z, r18

  _written = false;
 388:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 38a:	ec 89       	ldd	r30, Y+20	; 0x14
 38c:	fd 89       	ldd	r31, Y+21	; 0x15
 38e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 390:	ea 89       	ldd	r30, Y+18	; 0x12
 392:	fb 89       	ldd	r31, Y+19	; 0x13
 394:	80 81       	ld	r24, Z
 396:	80 61       	ori	r24, 0x10	; 16
 398:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 39a:	ea 89       	ldd	r30, Y+18	; 0x12
 39c:	fb 89       	ldd	r31, Y+19	; 0x13
 39e:	80 81       	ld	r24, Z
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 3a4:	ea 89       	ldd	r30, Y+18	; 0x12
 3a6:	fb 89       	ldd	r31, Y+19	; 0x13
 3a8:	80 81       	ld	r24, Z
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 3ae:	ea 89       	ldd	r30, Y+18	; 0x12
 3b0:	fb 89       	ldd	r31, Y+19	; 0x13
 3b2:	80 81       	ld	r24, Z
 3b4:	8f 7d       	andi	r24, 0xDF	; 223
 3b6:	80 83       	st	Z, r24
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	08 95       	ret

000003c8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 3dc:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Serial+0x10>
 3e0:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Serial+0x11>
 3e4:	80 81       	ld	r24, Z
 3e6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <Serial+0x16>
 3ea:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <Serial+0x17>
 3ee:	82 fd       	sbrc	r24, 2
 3f0:	12 c0       	rjmp	.+36     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3f2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3f4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <Serial+0x19>
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3fc:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <Serial+0x1a>
 400:	82 17       	cp	r24, r18
 402:	51 f0       	breq	.+20     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
      _rx_buffer[_rx_buffer_head] = c;
 404:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Serial+0x19>
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ea 5b       	subi	r30, 0xBA	; 186
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 410:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <Serial+0x19>
 414:	01 c0       	rjmp	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 416:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 44e:	86 e4       	ldi	r24, 0x46	; 70
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 478:	86 e4       	ldi	r24, 0x46	; 70
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN14HardwareSerial9availableEv>
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	89 2b       	or	r24, r25
 484:	09 f4       	brne	.+2      	; 0x488 <_Z17Serial0_availablev+0x10>
 486:	20 e0       	ldi	r18, 0x00	; 0
}
 488:	82 2f       	mov	r24, r18
 48a:	08 95       	ret

0000048c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 48c:	e6 e4       	ldi	r30, 0x46	; 70
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	13 82       	std	Z+3, r1	; 0x03
 492:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 494:	88 ee       	ldi	r24, 0xE8	; 232
 496:	93 e0       	ldi	r25, 0x03	; 3
 498:	a0 e0       	ldi	r26, 0x00	; 0
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	84 83       	std	Z+4, r24	; 0x04
 49e:	95 83       	std	Z+5, r25	; 0x05
 4a0:	a6 83       	std	Z+6, r26	; 0x06
 4a2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 4a4:	82 e2       	ldi	r24, 0x22	; 34
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	91 83       	std	Z+1, r25	; 0x01
 4aa:	80 83       	st	Z, r24
 4ac:	85 ec       	ldi	r24, 0xC5	; 197
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	95 87       	std	Z+13, r25	; 0x0d
 4b2:	84 87       	std	Z+12, r24	; 0x0c
 4b4:	84 ec       	ldi	r24, 0xC4	; 196
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	97 87       	std	Z+15, r25	; 0x0f
 4ba:	86 87       	std	Z+14, r24	; 0x0e
 4bc:	80 ec       	ldi	r24, 0xC0	; 192
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	91 8b       	std	Z+17, r25	; 0x11
 4c2:	80 8b       	std	Z+16, r24	; 0x10
 4c4:	81 ec       	ldi	r24, 0xC1	; 193
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	93 8b       	std	Z+19, r25	; 0x13
 4ca:	82 8b       	std	Z+18, r24	; 0x12
 4cc:	82 ec       	ldi	r24, 0xC2	; 194
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	95 8b       	std	Z+21, r25	; 0x15
 4d2:	84 8b       	std	Z+20, r24	; 0x14
 4d4:	86 ec       	ldi	r24, 0xC6	; 198
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	97 8b       	std	Z+23, r25	; 0x17
 4da:	86 8b       	std	Z+22, r24	; 0x16
 4dc:	11 8e       	std	Z+25, r1	; 0x19
 4de:	12 8e       	std	Z+26, r1	; 0x1a
 4e0:	13 8e       	std	Z+27, r1	; 0x1b
 4e2:	14 8e       	std	Z+28, r1	; 0x1c
 4e4:	08 95       	ret

000004e6 <initVariant>:
 4e6:	08 95       	ret

000004e8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 4e8:	0e 94 83 03 	call	0x706	; 0x706 <init>

	initVariant();
 4ec:	0e 94 73 02 	call	0x4e6	; 0x4e6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 4f0:	0e 94 78 00 	call	0xf0	; 0xf0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 4f4:	c0 ee       	ldi	r28, 0xE0	; 224
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 4f8:	0e 94 8d 00 	call	0x11a	; 0x11a <loop>
		if (serialEventRun) serialEventRun();
 4fc:	20 97       	sbiw	r28, 0x00	; 0
 4fe:	e1 f3       	breq	.-8      	; 0x4f8 <main+0x10>
 500:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z14serialEventRunv>
 504:	f9 cf       	rjmp	.-14     	; 0x4f8 <main+0x10>

00000506 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	6c 01       	movw	r12, r24
 518:	7a 01       	movw	r14, r20
 51a:	8b 01       	movw	r16, r22
 51c:	c0 e0       	ldi	r28, 0x00	; 0
 51e:	d0 e0       	ldi	r29, 0x00	; 0
 520:	ce 15       	cp	r28, r14
 522:	df 05       	cpc	r29, r15
 524:	81 f0       	breq	.+32     	; 0x546 <_ZN5Print5writeEPKhj+0x40>
 526:	d8 01       	movw	r26, r16
 528:	6d 91       	ld	r22, X+
 52a:	8d 01       	movw	r16, r26
 52c:	d6 01       	movw	r26, r12
 52e:	ed 91       	ld	r30, X+
 530:	fc 91       	ld	r31, X
 532:	01 90       	ld	r0, Z+
 534:	f0 81       	ld	r31, Z
 536:	e0 2d       	mov	r30, r0
 538:	c6 01       	movw	r24, r12
 53a:	09 95       	icall
 53c:	89 2b       	or	r24, r25
 53e:	11 f0       	breq	.+4      	; 0x544 <_ZN5Print5writeEPKhj+0x3e>
 540:	21 96       	adiw	r28, 0x01	; 1
 542:	ee cf       	rjmp	.-36     	; 0x520 <_ZN5Print5writeEPKhj+0x1a>
 544:	7e 01       	movw	r14, r28
 546:	c7 01       	movw	r24, r14
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
 556:	cf 90       	pop	r12
 558:	08 95       	ret

0000055a <_ZN5Print5writeEPKc>:
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	79 f0       	breq	.+30     	; 0x57e <_ZN5Print5writeEPKc+0x24>
 560:	fb 01       	movw	r30, r22
 562:	01 90       	ld	r0, Z+
 564:	00 20       	and	r0, r0
 566:	e9 f7       	brne	.-6      	; 0x562 <_ZN5Print5writeEPKc+0x8>
 568:	31 97       	sbiw	r30, 0x01	; 1
 56a:	af 01       	movw	r20, r30
 56c:	46 1b       	sub	r20, r22
 56e:	57 0b       	sbc	r21, r23
 570:	dc 01       	movw	r26, r24
 572:	ed 91       	ld	r30, X+
 574:	fc 91       	ld	r31, X
 576:	02 80       	ldd	r0, Z+2	; 0x02
 578:	f3 81       	ldd	r31, Z+3	; 0x03
 57a:	e0 2d       	mov	r30, r0
 57c:	09 94       	ijmp
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	08 95       	ret

00000584 <_ZN5Print7printlnEv>:
 584:	60 e3       	ldi	r22, 0x30	; 48
 586:	71 e0       	ldi	r23, 0x01	; 1
 588:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_ZN5Print5writeEPKc>

0000058c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 596:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN5Print5writeEPKc>
 59a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 59c:	ce 01       	movw	r24, r28
 59e:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN5Print7printlnEv>
  return n;
}
 5a2:	80 0f       	add	r24, r16
 5a4:	91 1f       	adc	r25, r17
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	08 95       	ret

000005b0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	8f 93       	push	r24
 5c0:	9f 93       	push	r25
 5c2:	af 93       	push	r26
 5c4:	bf 93       	push	r27
 5c6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <timer0_millis>
 5ca:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <timer0_millis+0x1>
 5ce:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <timer0_millis+0x2>
 5d2:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <timer0_millis+0x3>
 5d6:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <timer0_fract>
 5da:	23 e0       	ldi	r18, 0x03	; 3
 5dc:	23 0f       	add	r18, r19
 5de:	2d 37       	cpi	r18, 0x7D	; 125
 5e0:	20 f4       	brcc	.+8      	; 0x5ea <__vector_16+0x3a>
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	a1 1d       	adc	r26, r1
 5e6:	b1 1d       	adc	r27, r1
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <__vector_16+0x44>
 5ea:	26 e8       	ldi	r18, 0x86	; 134
 5ec:	23 0f       	add	r18, r19
 5ee:	02 96       	adiw	r24, 0x02	; 2
 5f0:	a1 1d       	adc	r26, r1
 5f2:	b1 1d       	adc	r27, r1
 5f4:	20 93 e3 01 	sts	0x01E3, r18	; 0x8001e3 <timer0_fract>
 5f8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <timer0_millis>
 5fc:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <timer0_millis+0x1>
 600:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <timer0_millis+0x2>
 604:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <timer0_millis+0x3>
 608:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <timer0_overflow_count>
 60c:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <timer0_overflow_count+0x1>
 610:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <timer0_overflow_count+0x2>
 614:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <timer0_overflow_count+0x3>
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	a1 1d       	adc	r26, r1
 61c:	b1 1d       	adc	r27, r1
 61e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <timer0_overflow_count>
 622:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <timer0_overflow_count+0x1>
 626:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <timer0_overflow_count+0x2>
 62a:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <timer0_overflow_count+0x3>
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	3f 91       	pop	r19
 638:	2f 91       	pop	r18
 63a:	0f 90       	pop	r0
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti

00000644 <micros>:
 644:	3f b7       	in	r19, 0x3f	; 63
 646:	f8 94       	cli
 648:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <timer0_overflow_count>
 64c:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <timer0_overflow_count+0x1>
 650:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <timer0_overflow_count+0x2>
 654:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <timer0_overflow_count+0x3>
 658:	26 b5       	in	r18, 0x26	; 38
 65a:	a8 9b       	sbis	0x15, 0	; 21
 65c:	05 c0       	rjmp	.+10     	; 0x668 <micros+0x24>
 65e:	2f 3f       	cpi	r18, 0xFF	; 255
 660:	19 f0       	breq	.+6      	; 0x668 <micros+0x24>
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	a1 1d       	adc	r26, r1
 666:	b1 1d       	adc	r27, r1
 668:	3f bf       	out	0x3f, r19	; 63
 66a:	ba 2f       	mov	r27, r26
 66c:	a9 2f       	mov	r26, r25
 66e:	98 2f       	mov	r25, r24
 670:	88 27       	eor	r24, r24
 672:	82 0f       	add	r24, r18
 674:	91 1d       	adc	r25, r1
 676:	a1 1d       	adc	r26, r1
 678:	b1 1d       	adc	r27, r1
 67a:	bc 01       	movw	r22, r24
 67c:	cd 01       	movw	r24, r26
 67e:	42 e0       	ldi	r20, 0x02	; 2
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	4a 95       	dec	r20
 68a:	d1 f7       	brne	.-12     	; 0x680 <micros+0x3c>
 68c:	08 95       	ret

0000068e <delay>:
 68e:	8f 92       	push	r8
 690:	9f 92       	push	r9
 692:	af 92       	push	r10
 694:	bf 92       	push	r11
 696:	cf 92       	push	r12
 698:	df 92       	push	r13
 69a:	ef 92       	push	r14
 69c:	ff 92       	push	r15
 69e:	6b 01       	movw	r12, r22
 6a0:	7c 01       	movw	r14, r24
 6a2:	0e 94 22 03 	call	0x644	; 0x644 <micros>
 6a6:	4b 01       	movw	r8, r22
 6a8:	5c 01       	movw	r10, r24
 6aa:	c1 14       	cp	r12, r1
 6ac:	d1 04       	cpc	r13, r1
 6ae:	e1 04       	cpc	r14, r1
 6b0:	f1 04       	cpc	r15, r1
 6b2:	01 f1       	breq	.+64     	; 0x6f4 <delay+0x66>
 6b4:	0e 94 44 04 	call	0x888	; 0x888 <yield>
 6b8:	0e 94 22 03 	call	0x644	; 0x644 <micros>
 6bc:	dc 01       	movw	r26, r24
 6be:	cb 01       	movw	r24, r22
 6c0:	88 19       	sub	r24, r8
 6c2:	99 09       	sbc	r25, r9
 6c4:	aa 09       	sbc	r26, r10
 6c6:	bb 09       	sbc	r27, r11
 6c8:	88 3e       	cpi	r24, 0xE8	; 232
 6ca:	93 40       	sbci	r25, 0x03	; 3
 6cc:	a1 05       	cpc	r26, r1
 6ce:	b1 05       	cpc	r27, r1
 6d0:	60 f3       	brcs	.-40     	; 0x6aa <delay+0x1c>
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	c2 1a       	sub	r12, r18
 6d6:	d1 08       	sbc	r13, r1
 6d8:	e1 08       	sbc	r14, r1
 6da:	f1 08       	sbc	r15, r1
 6dc:	88 ee       	ldi	r24, 0xE8	; 232
 6de:	88 0e       	add	r8, r24
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	98 1e       	adc	r9, r24
 6e4:	a1 1c       	adc	r10, r1
 6e6:	b1 1c       	adc	r11, r1
 6e8:	c1 14       	cp	r12, r1
 6ea:	d1 04       	cpc	r13, r1
 6ec:	e1 04       	cpc	r14, r1
 6ee:	f1 04       	cpc	r15, r1
 6f0:	19 f7       	brne	.-58     	; 0x6b8 <delay+0x2a>
 6f2:	db cf       	rjmp	.-74     	; 0x6aa <delay+0x1c>
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	df 90       	pop	r13
 6fa:	cf 90       	pop	r12
 6fc:	bf 90       	pop	r11
 6fe:	af 90       	pop	r10
 700:	9f 90       	pop	r9
 702:	8f 90       	pop	r8
 704:	08 95       	ret

00000706 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 706:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 708:	84 b5       	in	r24, 0x24	; 36
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 70e:	84 b5       	in	r24, 0x24	; 36
 710:	81 60       	ori	r24, 0x01	; 1
 712:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 714:	85 b5       	in	r24, 0x25	; 37
 716:	82 60       	ori	r24, 0x02	; 2
 718:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 71a:	85 b5       	in	r24, 0x25	; 37
 71c:	81 60       	ori	r24, 0x01	; 1
 71e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 720:	ee e6       	ldi	r30, 0x6E	; 110
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	81 60       	ori	r24, 0x01	; 1
 728:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 72a:	e1 e8       	ldi	r30, 0x81	; 129
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 730:	80 81       	ld	r24, Z
 732:	82 60       	ori	r24, 0x02	; 2
 734:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 736:	80 81       	ld	r24, Z
 738:	81 60       	ori	r24, 0x01	; 1
 73a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 73c:	e0 e8       	ldi	r30, 0x80	; 128
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	81 60       	ori	r24, 0x01	; 1
 744:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 746:	e1 eb       	ldi	r30, 0xB1	; 177
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	84 60       	ori	r24, 0x04	; 4
 74e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 750:	e0 eb       	ldi	r30, 0xB0	; 176
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	81 60       	ori	r24, 0x01	; 1
 758:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 75a:	ea e7       	ldi	r30, 0x7A	; 122
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	84 60       	ori	r24, 0x04	; 4
 762:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 764:	80 81       	ld	r24, Z
 766:	82 60       	ori	r24, 0x02	; 2
 768:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 76a:	80 81       	ld	r24, Z
 76c:	81 60       	ori	r24, 0x01	; 1
 76e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 770:	80 81       	ld	r24, Z
 772:	80 68       	ori	r24, 0x80	; 128
 774:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 776:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 77a:	08 95       	ret

0000077c <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	if (buffer) free(buffer);
 77c:	fc 01       	movw	r30, r24
 77e:	80 81       	ld	r24, Z
 780:	91 81       	ldd	r25, Z+1	; 0x01
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	11 f0       	breq	.+4      	; 0x78a <_ZN6StringD1Ev+0xe>
 786:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <free>
 78a:	08 95       	ret

0000078c <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
 792:	88 81       	ld	r24, Y
 794:	99 81       	ldd	r25, Y+1	; 0x01
 796:	00 97       	sbiw	r24, 0x00	; 0
 798:	11 f0       	breq	.+4      	; 0x79e <_ZN6String10invalidateEv+0x12>
 79a:	0e 94 05 05 	call	0xa0a	; 0xa0a <free>
	buffer = NULL;
 79e:	19 82       	std	Y+1, r1	; 0x01
 7a0:	18 82       	st	Y, r1
	capacity = len = 0;
 7a2:	1d 82       	std	Y+5, r1	; 0x05
 7a4:	1c 82       	std	Y+4, r1	; 0x04
 7a6:	1b 82       	std	Y+3, r1	; 0x03
 7a8:	1a 82       	std	Y+2, r1	; 0x02
}
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	ec 01       	movw	r28, r24
 7ba:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 7bc:	6f 5f       	subi	r22, 0xFF	; 255
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	88 81       	ld	r24, Y
 7c2:	99 81       	ldd	r25, Y+1	; 0x01
 7c4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <realloc>
	if (newbuffer) {
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	31 f0       	breq	.+12     	; 0x7d8 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
 7cc:	99 83       	std	Y+1, r25	; 0x01
 7ce:	88 83       	st	Y, r24
		capacity = maxStrLen;
 7d0:	1b 83       	std	Y+3, r17	; 0x03
 7d2:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
 7d8:	80 e0       	ldi	r24, 0x00	; 0
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	08 95       	ret

000007e4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
 7ea:	88 81       	ld	r24, Y
 7ec:	99 81       	ldd	r25, Y+1	; 0x01
 7ee:	89 2b       	or	r24, r25
 7f0:	29 f0       	breq	.+10     	; 0x7fc <_ZN6String7reserveEj+0x18>
 7f2:	8a 81       	ldd	r24, Y+2	; 0x02
 7f4:	9b 81       	ldd	r25, Y+3	; 0x03
 7f6:	86 17       	cp	r24, r22
 7f8:	97 07       	cpc	r25, r23
 7fa:	60 f4       	brcc	.+24     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	if (changeBuffer(size)) {
 7fc:	ce 01       	movw	r24, r28
 7fe:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN6String12changeBufferEj>
 802:	88 23       	and	r24, r24
 804:	41 f0       	breq	.+16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		if (len == 0) buffer[0] = 0;
 806:	8c 81       	ldd	r24, Y+4	; 0x04
 808:	9d 81       	ldd	r25, Y+5	; 0x05
 80a:	89 2b       	or	r24, r25
 80c:	19 f4       	brne	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80e:	e8 81       	ld	r30, Y
 810:	f9 81       	ldd	r31, Y+1	; 0x01
 812:	10 82       	st	Z, r1
 814:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	08 95       	ret

0000081c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	ec 01       	movw	r28, r24
 82a:	7b 01       	movw	r14, r22
 82c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
 82e:	ba 01       	movw	r22, r20
 830:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_ZN6String7reserveEj>
 834:	81 11       	cpse	r24, r1
 836:	04 c0       	rjmp	.+8      	; 0x840 <_ZN6String4copyEPKcj+0x24>
		invalidate();
 838:	ce 01       	movw	r24, r28
 83a:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN6String10invalidateEv>
		return *this;
 83e:	07 c0       	rjmp	.+14     	; 0x84e <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
 840:	1d 83       	std	Y+5, r17	; 0x05
 842:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
 844:	b7 01       	movw	r22, r14
 846:	88 81       	ld	r24, Y
 848:	99 81       	ldd	r25, Y+1	; 0x01
 84a:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
	return *this;
}
 84e:	ce 01       	movw	r24, r28
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	ff 90       	pop	r15
 85a:	ef 90       	pop	r14
 85c:	08 95       	ret

0000085e <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 85e:	fc 01       	movw	r30, r24
 860:	11 82       	std	Z+1, r1	; 0x01
 862:	10 82       	st	Z, r1
	capacity = 0;
 864:	13 82       	std	Z+3, r1	; 0x03
 866:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
 868:	15 82       	std	Z+5, r1	; 0x05
 86a:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
 86c:	61 15       	cp	r22, r1
 86e:	71 05       	cpc	r23, r1
 870:	51 f0       	breq	.+20     	; 0x886 <_ZN6StringC1EPKc+0x28>
 872:	fb 01       	movw	r30, r22
 874:	01 90       	ld	r0, Z+
 876:	00 20       	and	r0, r0
 878:	e9 f7       	brne	.-6      	; 0x874 <_ZN6StringC1EPKc+0x16>
 87a:	31 97       	sbiw	r30, 0x01	; 1
 87c:	af 01       	movw	r20, r30
 87e:	46 1b       	sub	r20, r22
 880:	57 0b       	sbc	r21, r23
 882:	0c 94 0e 04 	jmp	0x81c	; 0x81c <_ZN6String4copyEPKcj>
 886:	08 95       	ret

00000888 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 888:	08 95       	ret

0000088a <__udivmodsi4>:
 88a:	a1 e2       	ldi	r26, 0x21	; 33
 88c:	1a 2e       	mov	r1, r26
 88e:	aa 1b       	sub	r26, r26
 890:	bb 1b       	sub	r27, r27
 892:	fd 01       	movw	r30, r26
 894:	0d c0       	rjmp	.+26     	; 0x8b0 <__udivmodsi4_ep>

00000896 <__udivmodsi4_loop>:
 896:	aa 1f       	adc	r26, r26
 898:	bb 1f       	adc	r27, r27
 89a:	ee 1f       	adc	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	a2 17       	cp	r26, r18
 8a0:	b3 07       	cpc	r27, r19
 8a2:	e4 07       	cpc	r30, r20
 8a4:	f5 07       	cpc	r31, r21
 8a6:	20 f0       	brcs	.+8      	; 0x8b0 <__udivmodsi4_ep>
 8a8:	a2 1b       	sub	r26, r18
 8aa:	b3 0b       	sbc	r27, r19
 8ac:	e4 0b       	sbc	r30, r20
 8ae:	f5 0b       	sbc	r31, r21

000008b0 <__udivmodsi4_ep>:
 8b0:	66 1f       	adc	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	1a 94       	dec	r1
 8ba:	69 f7       	brne	.-38     	; 0x896 <__udivmodsi4_loop>
 8bc:	60 95       	com	r22
 8be:	70 95       	com	r23
 8c0:	80 95       	com	r24
 8c2:	90 95       	com	r25
 8c4:	9b 01       	movw	r18, r22
 8c6:	ac 01       	movw	r20, r24
 8c8:	bd 01       	movw	r22, r26
 8ca:	cf 01       	movw	r24, r30
 8cc:	08 95       	ret

000008ce <__tablejump2__>:
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	05 90       	lpm	r0, Z+
 8d4:	f4 91       	lpm	r31, Z
 8d6:	e0 2d       	mov	r30, r0
 8d8:	09 94       	ijmp

000008da <malloc>:
 8da:	0f 93       	push	r16
 8dc:	1f 93       	push	r17
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	82 30       	cpi	r24, 0x02	; 2
 8e4:	91 05       	cpc	r25, r1
 8e6:	10 f4       	brcc	.+4      	; 0x8ec <malloc+0x12>
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <__flp>
 8f0:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <__flp+0x1>
 8f4:	20 e0       	ldi	r18, 0x00	; 0
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	a0 e0       	ldi	r26, 0x00	; 0
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	30 97       	sbiw	r30, 0x00	; 0
 8fe:	19 f1       	breq	.+70     	; 0x946 <__stack+0x47>
 900:	40 81       	ld	r20, Z
 902:	51 81       	ldd	r21, Z+1	; 0x01
 904:	02 81       	ldd	r16, Z+2	; 0x02
 906:	13 81       	ldd	r17, Z+3	; 0x03
 908:	48 17       	cp	r20, r24
 90a:	59 07       	cpc	r21, r25
 90c:	c8 f0       	brcs	.+50     	; 0x940 <__stack+0x41>
 90e:	84 17       	cp	r24, r20
 910:	95 07       	cpc	r25, r21
 912:	69 f4       	brne	.+26     	; 0x92e <__stack+0x2f>
 914:	10 97       	sbiw	r26, 0x00	; 0
 916:	31 f0       	breq	.+12     	; 0x924 <__stack+0x25>
 918:	12 96       	adiw	r26, 0x02	; 2
 91a:	0c 93       	st	X, r16
 91c:	12 97       	sbiw	r26, 0x02	; 2
 91e:	13 96       	adiw	r26, 0x03	; 3
 920:	1c 93       	st	X, r17
 922:	27 c0       	rjmp	.+78     	; 0x972 <__stack+0x73>
 924:	00 93 ee 01 	sts	0x01EE, r16	; 0x8001ee <__flp>
 928:	10 93 ef 01 	sts	0x01EF, r17	; 0x8001ef <__flp+0x1>
 92c:	22 c0       	rjmp	.+68     	; 0x972 <__stack+0x73>
 92e:	21 15       	cp	r18, r1
 930:	31 05       	cpc	r19, r1
 932:	19 f0       	breq	.+6      	; 0x93a <__stack+0x3b>
 934:	42 17       	cp	r20, r18
 936:	53 07       	cpc	r21, r19
 938:	18 f4       	brcc	.+6      	; 0x940 <__stack+0x41>
 93a:	9a 01       	movw	r18, r20
 93c:	bd 01       	movw	r22, r26
 93e:	ef 01       	movw	r28, r30
 940:	df 01       	movw	r26, r30
 942:	f8 01       	movw	r30, r16
 944:	db cf       	rjmp	.-74     	; 0x8fc <malloc+0x22>
 946:	21 15       	cp	r18, r1
 948:	31 05       	cpc	r19, r1
 94a:	f9 f0       	breq	.+62     	; 0x98a <__stack+0x8b>
 94c:	28 1b       	sub	r18, r24
 94e:	39 0b       	sbc	r19, r25
 950:	24 30       	cpi	r18, 0x04	; 4
 952:	31 05       	cpc	r19, r1
 954:	80 f4       	brcc	.+32     	; 0x976 <__stack+0x77>
 956:	8a 81       	ldd	r24, Y+2	; 0x02
 958:	9b 81       	ldd	r25, Y+3	; 0x03
 95a:	61 15       	cp	r22, r1
 95c:	71 05       	cpc	r23, r1
 95e:	21 f0       	breq	.+8      	; 0x968 <__stack+0x69>
 960:	fb 01       	movw	r30, r22
 962:	93 83       	std	Z+3, r25	; 0x03
 964:	82 83       	std	Z+2, r24	; 0x02
 966:	04 c0       	rjmp	.+8      	; 0x970 <__stack+0x71>
 968:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <__flp+0x1>
 96c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <__flp>
 970:	fe 01       	movw	r30, r28
 972:	32 96       	adiw	r30, 0x02	; 2
 974:	44 c0       	rjmp	.+136    	; 0x9fe <__stack+0xff>
 976:	fe 01       	movw	r30, r28
 978:	e2 0f       	add	r30, r18
 97a:	f3 1f       	adc	r31, r19
 97c:	81 93       	st	Z+, r24
 97e:	91 93       	st	Z+, r25
 980:	22 50       	subi	r18, 0x02	; 2
 982:	31 09       	sbc	r19, r1
 984:	39 83       	std	Y+1, r19	; 0x01
 986:	28 83       	st	Y, r18
 988:	3a c0       	rjmp	.+116    	; 0x9fe <__stack+0xff>
 98a:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <__brkval>
 98e:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <__brkval+0x1>
 992:	23 2b       	or	r18, r19
 994:	41 f4       	brne	.+16     	; 0x9a6 <__stack+0xa7>
 996:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 99a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 99e:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <__brkval+0x1>
 9a2:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <__brkval>
 9a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 9aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9ae:	21 15       	cp	r18, r1
 9b0:	31 05       	cpc	r19, r1
 9b2:	41 f4       	brne	.+16     	; 0x9c4 <__stack+0xc5>
 9b4:	2d b7       	in	r18, 0x3d	; 61
 9b6:	3e b7       	in	r19, 0x3e	; 62
 9b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 9bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 9c0:	24 1b       	sub	r18, r20
 9c2:	35 0b       	sbc	r19, r21
 9c4:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <__brkval>
 9c8:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <__brkval+0x1>
 9cc:	e2 17       	cp	r30, r18
 9ce:	f3 07       	cpc	r31, r19
 9d0:	a0 f4       	brcc	.+40     	; 0x9fa <__stack+0xfb>
 9d2:	2e 1b       	sub	r18, r30
 9d4:	3f 0b       	sbc	r19, r31
 9d6:	28 17       	cp	r18, r24
 9d8:	39 07       	cpc	r19, r25
 9da:	78 f0       	brcs	.+30     	; 0x9fa <__stack+0xfb>
 9dc:	ac 01       	movw	r20, r24
 9de:	4e 5f       	subi	r20, 0xFE	; 254
 9e0:	5f 4f       	sbci	r21, 0xFF	; 255
 9e2:	24 17       	cp	r18, r20
 9e4:	35 07       	cpc	r19, r21
 9e6:	48 f0       	brcs	.+18     	; 0x9fa <__stack+0xfb>
 9e8:	4e 0f       	add	r20, r30
 9ea:	5f 1f       	adc	r21, r31
 9ec:	50 93 ed 01 	sts	0x01ED, r21	; 0x8001ed <__brkval+0x1>
 9f0:	40 93 ec 01 	sts	0x01EC, r20	; 0x8001ec <__brkval>
 9f4:	81 93       	st	Z+, r24
 9f6:	91 93       	st	Z+, r25
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	e0 e0       	ldi	r30, 0x00	; 0
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	cf 01       	movw	r24, r30
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	0f 91       	pop	r16
 a08:	08 95       	ret

00000a0a <free>:
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	00 97       	sbiw	r24, 0x00	; 0
 a10:	09 f4       	brne	.+2      	; 0xa14 <free+0xa>
 a12:	81 c0       	rjmp	.+258    	; 0xb16 <free+0x10c>
 a14:	fc 01       	movw	r30, r24
 a16:	32 97       	sbiw	r30, 0x02	; 2
 a18:	13 82       	std	Z+3, r1	; 0x03
 a1a:	12 82       	std	Z+2, r1	; 0x02
 a1c:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <__flp>
 a20:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <__flp+0x1>
 a24:	10 97       	sbiw	r26, 0x00	; 0
 a26:	81 f4       	brne	.+32     	; 0xa48 <free+0x3e>
 a28:	20 81       	ld	r18, Z
 a2a:	31 81       	ldd	r19, Z+1	; 0x01
 a2c:	82 0f       	add	r24, r18
 a2e:	93 1f       	adc	r25, r19
 a30:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <__brkval>
 a34:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <__brkval+0x1>
 a38:	28 17       	cp	r18, r24
 a3a:	39 07       	cpc	r19, r25
 a3c:	51 f5       	brne	.+84     	; 0xa92 <free+0x88>
 a3e:	f0 93 ed 01 	sts	0x01ED, r31	; 0x8001ed <__brkval+0x1>
 a42:	e0 93 ec 01 	sts	0x01EC, r30	; 0x8001ec <__brkval>
 a46:	67 c0       	rjmp	.+206    	; 0xb16 <free+0x10c>
 a48:	ed 01       	movw	r28, r26
 a4a:	20 e0       	ldi	r18, 0x00	; 0
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	ce 17       	cp	r28, r30
 a50:	df 07       	cpc	r29, r31
 a52:	40 f4       	brcc	.+16     	; 0xa64 <free+0x5a>
 a54:	4a 81       	ldd	r20, Y+2	; 0x02
 a56:	5b 81       	ldd	r21, Y+3	; 0x03
 a58:	9e 01       	movw	r18, r28
 a5a:	41 15       	cp	r20, r1
 a5c:	51 05       	cpc	r21, r1
 a5e:	f1 f0       	breq	.+60     	; 0xa9c <free+0x92>
 a60:	ea 01       	movw	r28, r20
 a62:	f5 cf       	rjmp	.-22     	; 0xa4e <free+0x44>
 a64:	d3 83       	std	Z+3, r29	; 0x03
 a66:	c2 83       	std	Z+2, r28	; 0x02
 a68:	40 81       	ld	r20, Z
 a6a:	51 81       	ldd	r21, Z+1	; 0x01
 a6c:	84 0f       	add	r24, r20
 a6e:	95 1f       	adc	r25, r21
 a70:	c8 17       	cp	r28, r24
 a72:	d9 07       	cpc	r29, r25
 a74:	59 f4       	brne	.+22     	; 0xa8c <free+0x82>
 a76:	88 81       	ld	r24, Y
 a78:	99 81       	ldd	r25, Y+1	; 0x01
 a7a:	84 0f       	add	r24, r20
 a7c:	95 1f       	adc	r25, r21
 a7e:	02 96       	adiw	r24, 0x02	; 2
 a80:	91 83       	std	Z+1, r25	; 0x01
 a82:	80 83       	st	Z, r24
 a84:	8a 81       	ldd	r24, Y+2	; 0x02
 a86:	9b 81       	ldd	r25, Y+3	; 0x03
 a88:	93 83       	std	Z+3, r25	; 0x03
 a8a:	82 83       	std	Z+2, r24	; 0x02
 a8c:	21 15       	cp	r18, r1
 a8e:	31 05       	cpc	r19, r1
 a90:	29 f4       	brne	.+10     	; 0xa9c <free+0x92>
 a92:	f0 93 ef 01 	sts	0x01EF, r31	; 0x8001ef <__flp+0x1>
 a96:	e0 93 ee 01 	sts	0x01EE, r30	; 0x8001ee <__flp>
 a9a:	3d c0       	rjmp	.+122    	; 0xb16 <free+0x10c>
 a9c:	e9 01       	movw	r28, r18
 a9e:	fb 83       	std	Y+3, r31	; 0x03
 aa0:	ea 83       	std	Y+2, r30	; 0x02
 aa2:	49 91       	ld	r20, Y+
 aa4:	59 91       	ld	r21, Y+
 aa6:	c4 0f       	add	r28, r20
 aa8:	d5 1f       	adc	r29, r21
 aaa:	ec 17       	cp	r30, r28
 aac:	fd 07       	cpc	r31, r29
 aae:	61 f4       	brne	.+24     	; 0xac8 <free+0xbe>
 ab0:	80 81       	ld	r24, Z
 ab2:	91 81       	ldd	r25, Z+1	; 0x01
 ab4:	84 0f       	add	r24, r20
 ab6:	95 1f       	adc	r25, r21
 ab8:	02 96       	adiw	r24, 0x02	; 2
 aba:	e9 01       	movw	r28, r18
 abc:	99 83       	std	Y+1, r25	; 0x01
 abe:	88 83       	st	Y, r24
 ac0:	82 81       	ldd	r24, Z+2	; 0x02
 ac2:	93 81       	ldd	r25, Z+3	; 0x03
 ac4:	9b 83       	std	Y+3, r25	; 0x03
 ac6:	8a 83       	std	Y+2, r24	; 0x02
 ac8:	e0 e0       	ldi	r30, 0x00	; 0
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	12 96       	adiw	r26, 0x02	; 2
 ace:	8d 91       	ld	r24, X+
 ad0:	9c 91       	ld	r25, X
 ad2:	13 97       	sbiw	r26, 0x03	; 3
 ad4:	00 97       	sbiw	r24, 0x00	; 0
 ad6:	19 f0       	breq	.+6      	; 0xade <free+0xd4>
 ad8:	fd 01       	movw	r30, r26
 ada:	dc 01       	movw	r26, r24
 adc:	f7 cf       	rjmp	.-18     	; 0xacc <free+0xc2>
 ade:	8d 91       	ld	r24, X+
 ae0:	9c 91       	ld	r25, X
 ae2:	11 97       	sbiw	r26, 0x01	; 1
 ae4:	9d 01       	movw	r18, r26
 ae6:	2e 5f       	subi	r18, 0xFE	; 254
 ae8:	3f 4f       	sbci	r19, 0xFF	; 255
 aea:	82 0f       	add	r24, r18
 aec:	93 1f       	adc	r25, r19
 aee:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <__brkval>
 af2:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <__brkval+0x1>
 af6:	28 17       	cp	r18, r24
 af8:	39 07       	cpc	r19, r25
 afa:	69 f4       	brne	.+26     	; 0xb16 <free+0x10c>
 afc:	30 97       	sbiw	r30, 0x00	; 0
 afe:	29 f4       	brne	.+10     	; 0xb0a <free+0x100>
 b00:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__flp+0x1>
 b04:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__flp>
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <free+0x104>
 b0a:	13 82       	std	Z+3, r1	; 0x03
 b0c:	12 82       	std	Z+2, r1	; 0x02
 b0e:	b0 93 ed 01 	sts	0x01ED, r27	; 0x8001ed <__brkval+0x1>
 b12:	a0 93 ec 01 	sts	0x01EC, r26	; 0x8001ec <__brkval>
 b16:	df 91       	pop	r29
 b18:	cf 91       	pop	r28
 b1a:	08 95       	ret

00000b1c <realloc>:
 b1c:	a0 e0       	ldi	r26, 0x00	; 0
 b1e:	b0 e0       	ldi	r27, 0x00	; 0
 b20:	e4 e9       	ldi	r30, 0x94	; 148
 b22:	f5 e0       	ldi	r31, 0x05	; 5
 b24:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__prologue_saves__+0x8>
 b28:	ec 01       	movw	r28, r24
 b2a:	00 97       	sbiw	r24, 0x00	; 0
 b2c:	21 f4       	brne	.+8      	; 0xb36 <realloc+0x1a>
 b2e:	cb 01       	movw	r24, r22
 b30:	0e 94 6d 04 	call	0x8da	; 0x8da <malloc>
 b34:	b4 c0       	rjmp	.+360    	; 0xc9e <realloc+0x182>
 b36:	fc 01       	movw	r30, r24
 b38:	e6 0f       	add	r30, r22
 b3a:	f7 1f       	adc	r31, r23
 b3c:	9c 01       	movw	r18, r24
 b3e:	22 50       	subi	r18, 0x02	; 2
 b40:	31 09       	sbc	r19, r1
 b42:	e2 17       	cp	r30, r18
 b44:	f3 07       	cpc	r31, r19
 b46:	08 f4       	brcc	.+2      	; 0xb4a <realloc+0x2e>
 b48:	a8 c0       	rjmp	.+336    	; 0xc9a <realloc+0x17e>
 b4a:	d9 01       	movw	r26, r18
 b4c:	0d 91       	ld	r16, X+
 b4e:	1c 91       	ld	r17, X
 b50:	11 97       	sbiw	r26, 0x01	; 1
 b52:	06 17       	cp	r16, r22
 b54:	17 07       	cpc	r17, r23
 b56:	b0 f0       	brcs	.+44     	; 0xb84 <realloc+0x68>
 b58:	05 30       	cpi	r16, 0x05	; 5
 b5a:	11 05       	cpc	r17, r1
 b5c:	08 f4       	brcc	.+2      	; 0xb60 <realloc+0x44>
 b5e:	9b c0       	rjmp	.+310    	; 0xc96 <realloc+0x17a>
 b60:	c8 01       	movw	r24, r16
 b62:	04 97       	sbiw	r24, 0x04	; 4
 b64:	86 17       	cp	r24, r22
 b66:	97 07       	cpc	r25, r23
 b68:	08 f4       	brcc	.+2      	; 0xb6c <realloc+0x50>
 b6a:	95 c0       	rjmp	.+298    	; 0xc96 <realloc+0x17a>
 b6c:	02 50       	subi	r16, 0x02	; 2
 b6e:	11 09       	sbc	r17, r1
 b70:	06 1b       	sub	r16, r22
 b72:	17 0b       	sbc	r17, r23
 b74:	01 93       	st	Z+, r16
 b76:	11 93       	st	Z+, r17
 b78:	6d 93       	st	X+, r22
 b7a:	7c 93       	st	X, r23
 b7c:	cf 01       	movw	r24, r30
 b7e:	0e 94 05 05 	call	0xa0a	; 0xa0a <free>
 b82:	89 c0       	rjmp	.+274    	; 0xc96 <realloc+0x17a>
 b84:	5b 01       	movw	r10, r22
 b86:	a0 1a       	sub	r10, r16
 b88:	b1 0a       	sbc	r11, r17
 b8a:	4c 01       	movw	r8, r24
 b8c:	80 0e       	add	r8, r16
 b8e:	91 1e       	adc	r9, r17
 b90:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <__flp>
 b94:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <__flp+0x1>
 b98:	61 2c       	mov	r6, r1
 b9a:	71 2c       	mov	r7, r1
 b9c:	e1 2c       	mov	r14, r1
 b9e:	f1 2c       	mov	r15, r1
 ba0:	10 97       	sbiw	r26, 0x00	; 0
 ba2:	09 f4       	brne	.+2      	; 0xba6 <realloc+0x8a>
 ba4:	46 c0       	rjmp	.+140    	; 0xc32 <realloc+0x116>
 ba6:	8d 91       	ld	r24, X+
 ba8:	9c 91       	ld	r25, X
 baa:	11 97       	sbiw	r26, 0x01	; 1
 bac:	a8 15       	cp	r26, r8
 bae:	b9 05       	cpc	r27, r9
 bb0:	b1 f5       	brne	.+108    	; 0xc1e <realloc+0x102>
 bb2:	6c 01       	movw	r12, r24
 bb4:	42 e0       	ldi	r20, 0x02	; 2
 bb6:	c4 0e       	add	r12, r20
 bb8:	d1 1c       	adc	r13, r1
 bba:	ca 14       	cp	r12, r10
 bbc:	db 04       	cpc	r13, r11
 bbe:	78 f1       	brcs	.+94     	; 0xc1e <realloc+0x102>
 bc0:	4c 01       	movw	r8, r24
 bc2:	8a 18       	sub	r8, r10
 bc4:	9b 08       	sbc	r9, r11
 bc6:	64 01       	movw	r12, r8
 bc8:	42 e0       	ldi	r20, 0x02	; 2
 bca:	c4 0e       	add	r12, r20
 bcc:	d1 1c       	adc	r13, r1
 bce:	12 96       	adiw	r26, 0x02	; 2
 bd0:	bc 90       	ld	r11, X
 bd2:	12 97       	sbiw	r26, 0x02	; 2
 bd4:	13 96       	adiw	r26, 0x03	; 3
 bd6:	ac 91       	ld	r26, X
 bd8:	b5 e0       	ldi	r27, 0x05	; 5
 bda:	cb 16       	cp	r12, r27
 bdc:	d1 04       	cpc	r13, r1
 bde:	40 f0       	brcs	.+16     	; 0xbf0 <realloc+0xd4>
 be0:	b2 82       	std	Z+2, r11	; 0x02
 be2:	a3 83       	std	Z+3, r26	; 0x03
 be4:	91 82       	std	Z+1, r9	; 0x01
 be6:	80 82       	st	Z, r8
 be8:	d9 01       	movw	r26, r18
 bea:	6d 93       	st	X+, r22
 bec:	7c 93       	st	X, r23
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <realloc+0xe6>
 bf0:	0e 5f       	subi	r16, 0xFE	; 254
 bf2:	1f 4f       	sbci	r17, 0xFF	; 255
 bf4:	80 0f       	add	r24, r16
 bf6:	91 1f       	adc	r25, r17
 bf8:	f9 01       	movw	r30, r18
 bfa:	91 83       	std	Z+1, r25	; 0x01
 bfc:	80 83       	st	Z, r24
 bfe:	eb 2d       	mov	r30, r11
 c00:	fa 2f       	mov	r31, r26
 c02:	e1 14       	cp	r14, r1
 c04:	f1 04       	cpc	r15, r1
 c06:	31 f0       	breq	.+12     	; 0xc14 <realloc+0xf8>
 c08:	d7 01       	movw	r26, r14
 c0a:	13 96       	adiw	r26, 0x03	; 3
 c0c:	fc 93       	st	X, r31
 c0e:	ee 93       	st	-X, r30
 c10:	12 97       	sbiw	r26, 0x02	; 2
 c12:	41 c0       	rjmp	.+130    	; 0xc96 <realloc+0x17a>
 c14:	f0 93 ef 01 	sts	0x01EF, r31	; 0x8001ef <__flp+0x1>
 c18:	e0 93 ee 01 	sts	0x01EE, r30	; 0x8001ee <__flp>
 c1c:	3c c0       	rjmp	.+120    	; 0xc96 <realloc+0x17a>
 c1e:	68 16       	cp	r6, r24
 c20:	79 06       	cpc	r7, r25
 c22:	08 f4       	brcc	.+2      	; 0xc26 <realloc+0x10a>
 c24:	3c 01       	movw	r6, r24
 c26:	7d 01       	movw	r14, r26
 c28:	12 96       	adiw	r26, 0x02	; 2
 c2a:	0d 90       	ld	r0, X+
 c2c:	bc 91       	ld	r27, X
 c2e:	a0 2d       	mov	r26, r0
 c30:	b7 cf       	rjmp	.-146    	; 0xba0 <realloc+0x84>
 c32:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__brkval>
 c36:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <__brkval+0x1>
 c3a:	88 16       	cp	r8, r24
 c3c:	99 06       	cpc	r9, r25
 c3e:	e1 f4       	brne	.+56     	; 0xc78 <realloc+0x15c>
 c40:	66 16       	cp	r6, r22
 c42:	77 06       	cpc	r7, r23
 c44:	c8 f4       	brcc	.+50     	; 0xc78 <realloc+0x15c>
 c46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c4a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 c4e:	00 97       	sbiw	r24, 0x00	; 0
 c50:	41 f4       	brne	.+16     	; 0xc62 <realloc+0x146>
 c52:	8d b7       	in	r24, 0x3d	; 61
 c54:	9e b7       	in	r25, 0x3e	; 62
 c56:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c5a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c5e:	84 1b       	sub	r24, r20
 c60:	95 0b       	sbc	r25, r21
 c62:	e8 17       	cp	r30, r24
 c64:	f9 07       	cpc	r31, r25
 c66:	c8 f4       	brcc	.+50     	; 0xc9a <realloc+0x17e>
 c68:	f0 93 ed 01 	sts	0x01ED, r31	; 0x8001ed <__brkval+0x1>
 c6c:	e0 93 ec 01 	sts	0x01EC, r30	; 0x8001ec <__brkval>
 c70:	f9 01       	movw	r30, r18
 c72:	71 83       	std	Z+1, r23	; 0x01
 c74:	60 83       	st	Z, r22
 c76:	0f c0       	rjmp	.+30     	; 0xc96 <realloc+0x17a>
 c78:	cb 01       	movw	r24, r22
 c7a:	0e 94 6d 04 	call	0x8da	; 0x8da <malloc>
 c7e:	7c 01       	movw	r14, r24
 c80:	00 97       	sbiw	r24, 0x00	; 0
 c82:	59 f0       	breq	.+22     	; 0xc9a <realloc+0x17e>
 c84:	a8 01       	movw	r20, r16
 c86:	be 01       	movw	r22, r28
 c88:	0e 94 54 06 	call	0xca8	; 0xca8 <memcpy>
 c8c:	ce 01       	movw	r24, r28
 c8e:	0e 94 05 05 	call	0xa0a	; 0xa0a <free>
 c92:	c7 01       	movw	r24, r14
 c94:	04 c0       	rjmp	.+8      	; 0xc9e <realloc+0x182>
 c96:	ce 01       	movw	r24, r28
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <realloc+0x182>
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
 ca2:	ee e0       	ldi	r30, 0x0E	; 14
 ca4:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__epilogue_restores__+0x8>

00000ca8 <memcpy>:
 ca8:	fb 01       	movw	r30, r22
 caa:	dc 01       	movw	r26, r24
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <memcpy+0xa>
 cae:	01 90       	ld	r0, Z+
 cb0:	0d 92       	st	X+, r0
 cb2:	41 50       	subi	r20, 0x01	; 1
 cb4:	50 40       	sbci	r21, 0x00	; 0
 cb6:	d8 f7       	brcc	.-10     	; 0xcae <memcpy+0x6>
 cb8:	08 95       	ret

00000cba <strcpy>:
 cba:	fb 01       	movw	r30, r22
 cbc:	dc 01       	movw	r26, r24
 cbe:	01 90       	ld	r0, Z+
 cc0:	0d 92       	st	X+, r0
 cc2:	00 20       	and	r0, r0
 cc4:	e1 f7       	brne	.-8      	; 0xcbe <strcpy+0x4>
 cc6:	08 95       	ret

00000cc8 <__prologue_saves__>:
 cc8:	2f 92       	push	r2
 cca:	3f 92       	push	r3
 ccc:	4f 92       	push	r4
 cce:	5f 92       	push	r5
 cd0:	6f 92       	push	r6
 cd2:	7f 92       	push	r7
 cd4:	8f 92       	push	r8
 cd6:	9f 92       	push	r9
 cd8:	af 92       	push	r10
 cda:	bf 92       	push	r11
 cdc:	cf 92       	push	r12
 cde:	df 92       	push	r13
 ce0:	ef 92       	push	r14
 ce2:	ff 92       	push	r15
 ce4:	0f 93       	push	r16
 ce6:	1f 93       	push	r17
 ce8:	cf 93       	push	r28
 cea:	df 93       	push	r29
 cec:	cd b7       	in	r28, 0x3d	; 61
 cee:	de b7       	in	r29, 0x3e	; 62
 cf0:	ca 1b       	sub	r28, r26
 cf2:	db 0b       	sbc	r29, r27
 cf4:	0f b6       	in	r0, 0x3f	; 63
 cf6:	f8 94       	cli
 cf8:	de bf       	out	0x3e, r29	; 62
 cfa:	0f be       	out	0x3f, r0	; 63
 cfc:	cd bf       	out	0x3d, r28	; 61
 cfe:	09 94       	ijmp

00000d00 <__epilogue_restores__>:
 d00:	2a 88       	ldd	r2, Y+18	; 0x12
 d02:	39 88       	ldd	r3, Y+17	; 0x11
 d04:	48 88       	ldd	r4, Y+16	; 0x10
 d06:	5f 84       	ldd	r5, Y+15	; 0x0f
 d08:	6e 84       	ldd	r6, Y+14	; 0x0e
 d0a:	7d 84       	ldd	r7, Y+13	; 0x0d
 d0c:	8c 84       	ldd	r8, Y+12	; 0x0c
 d0e:	9b 84       	ldd	r9, Y+11	; 0x0b
 d10:	aa 84       	ldd	r10, Y+10	; 0x0a
 d12:	b9 84       	ldd	r11, Y+9	; 0x09
 d14:	c8 84       	ldd	r12, Y+8	; 0x08
 d16:	df 80       	ldd	r13, Y+7	; 0x07
 d18:	ee 80       	ldd	r14, Y+6	; 0x06
 d1a:	fd 80       	ldd	r15, Y+5	; 0x05
 d1c:	0c 81       	ldd	r16, Y+4	; 0x04
 d1e:	1b 81       	ldd	r17, Y+3	; 0x03
 d20:	aa 81       	ldd	r26, Y+2	; 0x02
 d22:	b9 81       	ldd	r27, Y+1	; 0x01
 d24:	ce 0f       	add	r28, r30
 d26:	d1 1d       	adc	r29, r1
 d28:	0f b6       	in	r0, 0x3f	; 63
 d2a:	f8 94       	cli
 d2c:	de bf       	out	0x3e, r29	; 62
 d2e:	0f be       	out	0x3f, r0	; 63
 d30:	cd bf       	out	0x3d, r28	; 61
 d32:	ed 01       	movw	r28, r26
 d34:	08 95       	ret

00000d36 <__do_global_dtors>:
 d36:	10 e0       	ldi	r17, 0x00	; 0
 d38:	c6 e3       	ldi	r28, 0x36	; 54
 d3a:	d0 e0       	ldi	r29, 0x00	; 0
 d3c:	04 c0       	rjmp	.+8      	; 0xd46 <__do_global_dtors+0x10>
 d3e:	fe 01       	movw	r30, r28
 d40:	0e 94 67 04 	call	0x8ce	; 0x8ce <__tablejump2__>
 d44:	21 96       	adiw	r28, 0x01	; 1
 d46:	c7 33       	cpi	r28, 0x37	; 55
 d48:	d1 07       	cpc	r29, r17
 d4a:	c9 f7       	brne	.-14     	; 0xd3e <__do_global_dtors+0x8>
 d4c:	f8 94       	cli

00000d4e <__stop_program>:
 d4e:	ff cf       	rjmp	.-2      	; 0xd4e <__stop_program>
