
sketch_mar07a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000fae  00001042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b1  00800148  00800148  0000108a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c0  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d7ad  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020f3  00000000  00000000  0000ee69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003189  00000000  00000000  00010f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012e0  00000000  00000000  000140e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026fc  00000000  00000000  000153c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007402  00000000  00000000  00017ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  0001eec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__dtors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_6>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_16>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_18>
  4c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_19>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	34 01       	movw	r6, r8
  ba:	e1 02       	muls	r30, r17

000000bc <__ctors_end>:
  bc:	3a 01       	movw	r6, r20

000000be <__dtors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d8 e0       	ldi	r29, 0x08	; 8
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	ee ea       	ldi	r30, 0xAE	; 174
  d2:	ff e0       	ldi	r31, 0x0F	; 15
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
  d6:	05 90       	lpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a8 34       	cpi	r26, 0x48	; 72
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	a8 e4       	ldi	r26, 0x48	; 72
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	a9 3f       	cpi	r26, 0xF9	; 249
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	ce e5       	ldi	r28, 0x5E	; 94
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
  f8:	21 97       	sbiw	r28, 0x01	; 1
  fa:	fe 01       	movw	r30, r28
  fc:	0e 94 96 05 	call	0xb2c	; 0xb2c <__tablejump2__>
 100:	cc 35       	cpi	r28, 0x5C	; 92
 102:	d1 07       	cpc	r29, r17
 104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
 106:	0e 94 0f 03 	call	0x61e	; 0x61e <main>
 10a:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__do_global_dtors>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
		if (clockSource & CS22) TCCR2B |= (1 << CS22);
		if (clockSource & CS21) TCCR2B |= (1 << CS21);
		if (clockSource & CS20) TCCR2B |= (1 << CS20);
	}
	#endif
}
 112:	41 11       	cpse	r20, r1
 114:	05 c0       	rjmp	.+10     	; 0x120 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0xe>
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	80 83       	st	Z, r24
 120:	6a 30       	cpi	r22, 0x0A	; 10
 122:	a9 f0       	breq	.+42     	; 0x14e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x3c>
 124:	63 fd       	sbrc	r22, 3
 126:	02 c0       	rjmp	.+4      	; 0x12c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1a>
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	01 c0       	rjmp	.+2      	; 0x12e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1c>
 12c:	88 e2       	ldi	r24, 0x28	; 40
 12e:	67 70       	andi	r22, 0x07	; 7
 130:	68 2b       	or	r22, r24
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	a8 95       	wdr
 13a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 13e:	0f be       	out	0x3f, r0	; 63
 140:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 144:	e0 e6       	ldi	r30, 0x60	; 96
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
 14e:	21 11       	cpse	r18, r1
 150:	14 c0       	rjmp	.+40     	; 0x17a <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x68>
 152:	83 b7       	in	r24, 0x33	; 51
 154:	81 7f       	andi	r24, 0xF1	; 241
 156:	84 60       	ori	r24, 0x04	; 4
 158:	83 bf       	out	0x33, r24	; 51
 15a:	f8 94       	cli
 15c:	83 b7       	in	r24, 0x33	; 51
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	83 bf       	out	0x33, r24	; 51
 162:	85 b7       	in	r24, 0x35	; 53
 164:	80 66       	ori	r24, 0x60	; 96
 166:	85 bf       	out	0x35, r24	; 53
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	85 bf       	out	0x35, r24	; 53
 16c:	78 94       	sei
 16e:	88 95       	sleep
 170:	83 b7       	in	r24, 0x33	; 51
 172:	8e 7f       	andi	r24, 0xFE	; 254
 174:	83 bf       	out	0x33, r24	; 51
 176:	78 94       	sei
 178:	0e c0       	rjmp	.+28     	; 0x196 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x84>
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	81 7f       	andi	r24, 0xF1	; 241
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	83 bf       	out	0x33, r24	; 51
 182:	f8 94       	cli
 184:	83 b7       	in	r24, 0x33	; 51
 186:	81 60       	ori	r24, 0x01	; 1
 188:	83 bf       	out	0x33, r24	; 51
 18a:	78 94       	sei
 18c:	88 95       	sleep
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	83 bf       	out	0x33, r24	; 51
 194:	78 94       	sei
 196:	41 11       	cpse	r20, r1
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x92>
 19a:	ea e7       	ldi	r30, 0x7A	; 122
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	a8 95       	wdr
 1b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 1bc:	88 61       	ori	r24, 0x18	; 24
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 1c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 1c6:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <setup>:
//SoftwareSerial loraSerial(2,3);
String message;

void setup()
{
  pinMode(4, OUTPUT);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	0e 94 82 04 	call	0x904	; 0x904 <pinMode>
  digitalWrite(4, HIGH);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	0e 94 be 04 	call	0x97c	; 0x97c <digitalWrite>
  delay(1000);
 1e4:	68 ee       	ldi	r22, 0xE8	; 232
 1e6:	73 e0       	ldi	r23, 0x03	; 3
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <delay>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 1f0:	26 e0       	ldi	r18, 0x06	; 6
 1f2:	40 e8       	ldi	r20, 0x80	; 128
 1f4:	55 e2       	ldi	r21, 0x25	; 37
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	8f e4       	ldi	r24, 0x4F	; 79
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 1a 02 	call	0x434	; 0x434 <_ZN14HardwareSerial5beginEmh>
  //loraSerial.begin(9600);
  Serial.begin(9600);
  Serial.println("init");
 202:	66 e0       	ldi	r22, 0x06	; 6
 204:	71 e0       	ldi	r23, 0x01	; 1
 206:	8f e4       	ldi	r24, 0x4F	; 79
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN5Print7printlnEPKc>
  delay(1000);
 20e:	68 ee       	ldi	r22, 0xE8	; 232
 210:	73 e0       	ldi	r23, 0x03	; 3
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <delay>

0000021a <loop>:
}

void loop()
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ca e0       	ldi	r28, 0x0A	; 10
 220:	d0 e0       	ldi	r29, 0x00	; 0
  // }
  // Serial.println();

  for (int i = 0; i < 10; i++)
  {
    Serial.println("AY BITCH");
 222:	6b e0       	ldi	r22, 0x0B	; 11
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	8f e4       	ldi	r24, 0x4F	; 79
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN5Print7printlnEPKc>
    delay(500);
 22e:	64 ef       	ldi	r22, 0xF4	; 244
 230:	71 e0       	ldi	r23, 0x01	; 1
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <delay>
 23a:	21 97       	sbiw	r28, 0x01	; 1
  //    Serial.print(c);
  //  }
  // }
  // Serial.println();

  for (int i = 0; i < 10; i++)
 23c:	91 f7       	brne	.-28     	; 0x222 <loop+0x8>
    delay(500);
  }
  

  // Serial.println(message);
  Serial.println("Going to sleep now");
 23e:	64 e1       	ldi	r22, 0x14	; 20
 240:	71 e0       	ldi	r23, 0x01	; 1
 242:	8f e4       	ldi	r24, 0x4F	; 79
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN5Print7printlnEPKc>
  delay(1000);
 24a:	68 ee       	ldi	r22, 0xE8	; 232
 24c:	73 e0       	ldi	r23, 0x03	; 3
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <delay>
  LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF); 
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	69 e0       	ldi	r22, 0x09	; 9
 25c:	88 e4       	ldi	r24, 0x48	; 72
 25e:	91 e0       	ldi	r25, 0x01	; 1
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
  

  // Serial.println(message);
  Serial.println("Going to sleep now");
  delay(1000);
  LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF); 
 264:	0c 94 89 00 	jmp	0x112	; 0x112 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>

00000268 <_GLOBAL__sub_I_rxTimeout>:

#define F_CPU 8000000

unsigned long rxTimeout = 0;
//SoftwareSerial loraSerial(2,3);
String message;
 268:	6b e3       	ldi	r22, 0x3B	; 59
 26a:	71 e0       	ldi	r23, 0x01	; 1
 26c:	89 e4       	ldi	r24, 0x49	; 73
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0c 94 5e 05 	jmp	0xabc	; 0xabc <_ZN6StringC1EPKc>

00000274 <_GLOBAL__sub_D_rxTimeout>:
 274:	89 e4       	ldi	r24, 0x49	; 73
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_ZN6StringD1Ev>

0000027c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 27c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 27e:	91 8d       	ldd	r25, Z+25	; 0x19
 280:	22 8d       	ldd	r18, Z+26	; 0x1a
 282:	89 2f       	mov	r24, r25
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	80 5c       	subi	r24, 0xC0	; 192
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	82 1b       	sub	r24, r18
 28c:	91 09       	sbc	r25, r1
}
 28e:	8f 73       	andi	r24, 0x3F	; 63
 290:	99 27       	eor	r25, r25
 292:	08 95       	ret

00000294 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 294:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 296:	91 8d       	ldd	r25, Z+25	; 0x19
 298:	82 8d       	ldd	r24, Z+26	; 0x1a
 29a:	98 17       	cp	r25, r24
 29c:	31 f0       	breq	.+12     	; 0x2aa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 29e:	82 8d       	ldd	r24, Z+26	; 0x1a
 2a0:	e8 0f       	add	r30, r24
 2a2:	f1 1d       	adc	r31, r1
 2a4:	85 8d       	ldd	r24, Z+29	; 0x1d
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2ae:	08 95       	ret

000002b0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2b0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2b2:	91 8d       	ldd	r25, Z+25	; 0x19
 2b4:	82 8d       	ldd	r24, Z+26	; 0x1a
 2b6:	98 17       	cp	r25, r24
 2b8:	61 f0       	breq	.+24     	; 0x2d2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2ba:	82 8d       	ldd	r24, Z+26	; 0x1a
 2bc:	df 01       	movw	r26, r30
 2be:	a8 0f       	add	r26, r24
 2c0:	b1 1d       	adc	r27, r1
 2c2:	5d 96       	adiw	r26, 0x1d	; 29
 2c4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2c6:	92 8d       	ldd	r25, Z+26	; 0x1a
 2c8:	9f 5f       	subi	r25, 0xFF	; 255
 2ca:	9f 73       	andi	r25, 0x3F	; 63
 2cc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 2d6:	08 95       	ret

000002d8 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 2d8:	fc 01       	movw	r30, r24
 2da:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 2dc:	44 8d       	ldd	r20, Z+28	; 0x1c
 2de:	25 2f       	mov	r18, r21
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	84 2f       	mov	r24, r20
 2e4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 2e6:	82 1b       	sub	r24, r18
 2e8:	93 0b       	sbc	r25, r19
 2ea:	54 17       	cp	r21, r20
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 2ee:	cf 96       	adiw	r24, 0x3f	; 63
 2f0:	08 95       	ret
  return tail - head - 1;
 2f2:	01 97       	sbiw	r24, 0x01	; 1
}
 2f4:	08 95       	ret

000002f6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 2f6:	87 ed       	ldi	r24, 0xD7	; 215
 2f8:	92 e0       	ldi	r25, 0x02	; 2
 2fa:	89 2b       	or	r24, r25
 2fc:	49 f0       	breq	.+18     	; 0x310 <_Z14serialEventRunv+0x1a>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	89 2b       	or	r24, r25
 304:	29 f0       	breq	.+10     	; 0x310 <_Z14serialEventRunv+0x1a>
 306:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z17Serial0_availablev>
 30a:	81 11       	cpse	r24, r1
 30c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 310:	08 95       	ret

00000312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 312:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 314:	84 8d       	ldd	r24, Z+28	; 0x1c
 316:	df 01       	movw	r26, r30
 318:	a8 0f       	add	r26, r24
 31a:	b1 1d       	adc	r27, r1
 31c:	a3 5a       	subi	r26, 0xA3	; 163
 31e:	bf 4f       	sbci	r27, 0xFF	; 255
 320:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 322:	84 8d       	ldd	r24, Z+28	; 0x1c
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	8f 73       	andi	r24, 0x3F	; 63
 32a:	99 27       	eor	r25, r25
 32c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 32e:	a6 89       	ldd	r26, Z+22	; 0x16
 330:	b7 89       	ldd	r27, Z+23	; 0x17
 332:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 334:	a0 89       	ldd	r26, Z+16	; 0x10
 336:	b1 89       	ldd	r27, Z+17	; 0x11
 338:	8c 91       	ld	r24, X
 33a:	83 70       	andi	r24, 0x03	; 3
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 340:	93 8d       	ldd	r25, Z+27	; 0x1b
 342:	84 8d       	ldd	r24, Z+28	; 0x1c
 344:	98 13       	cpse	r25, r24
 346:	06 c0       	rjmp	.+12     	; 0x354 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 348:	02 88       	ldd	r0, Z+18	; 0x12
 34a:	f3 89       	ldd	r31, Z+19	; 0x13
 34c:	e0 2d       	mov	r30, r0
 34e:	80 81       	ld	r24, Z
 350:	8f 7d       	andi	r24, 0xDF	; 223
 352:	80 83       	st	Z, r24
 354:	08 95       	ret

00000356 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
  _written = true;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 368:	9b 8d       	ldd	r25, Y+27	; 0x1b
 36a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 36c:	98 13       	cpse	r25, r24
 36e:	05 c0       	rjmp	.+10     	; 0x37a <_ZN14HardwareSerial5writeEh+0x24>
 370:	e8 89       	ldd	r30, Y+16	; 0x10
 372:	f9 89       	ldd	r31, Y+17	; 0x11
 374:	80 81       	ld	r24, Z
 376:	85 fd       	sbrc	r24, 5
 378:	26 c0       	rjmp	.+76     	; 0x3c6 <_ZN14HardwareSerial5writeEh+0x70>
 37a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 37c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 37e:	10 e0       	ldi	r17, 0x00	; 0
 380:	0f 5f       	subi	r16, 0xFF	; 255
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	0f 73       	andi	r16, 0x3F	; 63
 386:	11 27       	eor	r17, r17
 388:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 38a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 38c:	e8 12       	cpse	r14, r24
 38e:	0c c0       	rjmp	.+24     	; 0x3a8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	07 fc       	sbrc	r0, 7
 394:	fa cf       	rjmp	.-12     	; 0x38a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 396:	e8 89       	ldd	r30, Y+16	; 0x10
 398:	f9 89       	ldd	r31, Y+17	; 0x11
 39a:	80 81       	ld	r24, Z
 39c:	85 ff       	sbrs	r24, 5
 39e:	f5 cf       	rjmp	.-22     	; 0x38a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3a0:	ce 01       	movw	r24, r28
 3a2:	0e 94 89 01 	call	0x312	; 0x312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3a6:	f1 cf       	rjmp	.-30     	; 0x38a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3aa:	fe 01       	movw	r30, r28
 3ac:	e8 0f       	add	r30, r24
 3ae:	f1 1d       	adc	r31, r1
 3b0:	e3 5a       	subi	r30, 0xA3	; 163
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3b6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3b8:	f8 94       	cli
    _tx_buffer_head = i;
 3ba:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 3bc:	ea 89       	ldd	r30, Y+18	; 0x12
 3be:	fb 89       	ldd	r31, Y+19	; 0x13
 3c0:	80 81       	ld	r24, Z
 3c2:	80 62       	ori	r24, 0x20	; 32
 3c4:	0a c0       	rjmp	.+20     	; 0x3da <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3c6:	9f b7       	in	r25, 0x3f	; 63
 3c8:	f8 94       	cli
      *_udr = c;
 3ca:	ee 89       	ldd	r30, Y+22	; 0x16
 3cc:	ff 89       	ldd	r31, Y+23	; 0x17
 3ce:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 3d0:	e8 89       	ldd	r30, Y+16	; 0x10
 3d2:	f9 89       	ldd	r31, Y+17	; 0x11
 3d4:	80 81       	ld	r24, Z
 3d6:	83 70       	andi	r24, 0x03	; 3
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3dc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	08 95       	ret

000003f0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3f6:	88 8d       	ldd	r24, Y+24	; 0x18
 3f8:	88 23       	and	r24, r24
 3fa:	c9 f0       	breq	.+50     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3fc:	ea 89       	ldd	r30, Y+18	; 0x12
 3fe:	fb 89       	ldd	r31, Y+19	; 0x13
 400:	80 81       	ld	r24, Z
 402:	85 fd       	sbrc	r24, 5
 404:	05 c0       	rjmp	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 406:	a8 89       	ldd	r26, Y+16	; 0x10
 408:	b9 89       	ldd	r27, Y+17	; 0x11
 40a:	8c 91       	ld	r24, X
 40c:	86 fd       	sbrc	r24, 6
 40e:	0f c0       	rjmp	.+30     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	07 fc       	sbrc	r0, 7
 414:	f5 cf       	rjmp	.-22     	; 0x400 <__EEPROM_REGION_LENGTH__>
 416:	80 81       	ld	r24, Z
 418:	85 ff       	sbrs	r24, 5
 41a:	f2 cf       	rjmp	.-28     	; 0x400 <__EEPROM_REGION_LENGTH__>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 41c:	a8 89       	ldd	r26, Y+16	; 0x10
 41e:	b9 89       	ldd	r27, Y+17	; 0x11
 420:	8c 91       	ld	r24, X
 422:	85 ff       	sbrs	r24, 5
 424:	ed cf       	rjmp	.-38     	; 0x400 <__EEPROM_REGION_LENGTH__>
	  _tx_udr_empty_irq();
 426:	ce 01       	movw	r24, r28
 428:	0e 94 89 01 	call	0x312	; 0x312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 42c:	e7 cf       	rjmp	.-50     	; 0x3fc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ec 01       	movw	r28, r24
 444:	6a 01       	movw	r12, r20
 446:	7b 01       	movw	r14, r22
 448:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 44a:	e8 89       	ldd	r30, Y+16	; 0x10
 44c:	f9 89       	ldd	r31, Y+17	; 0x11
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 452:	41 15       	cp	r20, r1
 454:	51 4e       	sbci	r21, 0xE1	; 225
 456:	61 05       	cpc	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	b1 f0       	breq	.+44     	; 0x488 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	79 e0       	ldi	r23, 0x09	; 9
 460:	8d e3       	ldi	r24, 0x3D	; 61
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	a7 01       	movw	r20, r14
 466:	96 01       	movw	r18, r12
 468:	0e 94 74 05 	call	0xae8	; 0xae8 <__udivmodsi4>
 46c:	da 01       	movw	r26, r20
 46e:	c9 01       	movw	r24, r18
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	a1 09       	sbc	r26, r1
 474:	b1 09       	sbc	r27, r1
 476:	b6 95       	lsr	r27
 478:	a7 95       	ror	r26
 47a:	97 95       	ror	r25
 47c:	87 95       	ror	r24
 47e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 480:	21 15       	cp	r18, r1
 482:	80 e1       	ldi	r24, 0x10	; 16
 484:	38 07       	cpc	r19, r24
 486:	a8 f0       	brcs	.+42     	; 0x4b2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 488:	e8 89       	ldd	r30, Y+16	; 0x10
 48a:	f9 89       	ldd	r31, Y+17	; 0x11
 48c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 48e:	60 e8       	ldi	r22, 0x80	; 128
 490:	74 e8       	ldi	r23, 0x84	; 132
 492:	8e e1       	ldi	r24, 0x1E	; 30
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a7 01       	movw	r20, r14
 498:	96 01       	movw	r18, r12
 49a:	0e 94 74 05 	call	0xae8	; 0xae8 <__udivmodsi4>
 49e:	da 01       	movw	r26, r20
 4a0:	c9 01       	movw	r24, r18
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	a1 09       	sbc	r26, r1
 4a6:	b1 09       	sbc	r27, r1
 4a8:	b6 95       	lsr	r27
 4aa:	a7 95       	ror	r26
 4ac:	97 95       	ror	r25
 4ae:	87 95       	ror	r24
 4b0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4b2:	ec 85       	ldd	r30, Y+12	; 0x0c
 4b4:	fd 85       	ldd	r31, Y+13	; 0x0d
 4b6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 4b8:	ee 85       	ldd	r30, Y+14	; 0x0e
 4ba:	ff 85       	ldd	r31, Y+15	; 0x0f
 4bc:	20 83       	st	Z, r18

  _written = false;
 4be:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 4c0:	ec 89       	ldd	r30, Y+20	; 0x14
 4c2:	fd 89       	ldd	r31, Y+21	; 0x15
 4c4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 4c6:	ea 89       	ldd	r30, Y+18	; 0x12
 4c8:	fb 89       	ldd	r31, Y+19	; 0x13
 4ca:	80 81       	ld	r24, Z
 4cc:	80 61       	ori	r24, 0x10	; 16
 4ce:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 4d0:	ea 89       	ldd	r30, Y+18	; 0x12
 4d2:	fb 89       	ldd	r31, Y+19	; 0x13
 4d4:	80 81       	ld	r24, Z
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 4da:	ea 89       	ldd	r30, Y+18	; 0x12
 4dc:	fb 89       	ldd	r31, Y+19	; 0x13
 4de:	80 81       	ld	r24, Z
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 4e4:	ea 89       	ldd	r30, Y+18	; 0x12
 4e6:	fb 89       	ldd	r31, Y+19	; 0x13
 4e8:	80 81       	ld	r24, Z
 4ea:	8f 7d       	andi	r24, 0xDF	; 223
 4ec:	80 83       	st	Z, r24
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 512:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Serial+0x10>
 516:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <Serial+0x11>
 51a:	80 81       	ld	r24, Z
 51c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <Serial+0x16>
 520:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <Serial+0x17>
 524:	82 fd       	sbrc	r24, 2
 526:	12 c0       	rjmp	.+36     	; 0x54c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 528:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 52a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <Serial+0x19>
 52e:	8f 5f       	subi	r24, 0xFF	; 255
 530:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 532:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <Serial+0x1a>
 536:	82 17       	cp	r24, r18
 538:	51 f0       	breq	.+20     	; 0x54e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 53a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Serial+0x19>
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	e1 5b       	subi	r30, 0xB1	; 177
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 546:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <Serial+0x19>
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 54c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 584:	8f e4       	ldi	r24, 0x4F	; 79
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 89 01 	call	0x312	; 0x312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5ae:	8f e4       	ldi	r24, 0x4F	; 79
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN14HardwareSerial9availableEv>
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	89 2b       	or	r24, r25
 5ba:	09 f4       	brne	.+2      	; 0x5be <_Z17Serial0_availablev+0x10>
 5bc:	20 e0       	ldi	r18, 0x00	; 0
}
 5be:	82 2f       	mov	r24, r18
 5c0:	08 95       	ret

000005c2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 5c2:	ef e4       	ldi	r30, 0x4F	; 79
 5c4:	f1 e0       	ldi	r31, 0x01	; 1
 5c6:	13 82       	std	Z+3, r1	; 0x03
 5c8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 5ca:	88 ee       	ldi	r24, 0xE8	; 232
 5cc:	93 e0       	ldi	r25, 0x03	; 3
 5ce:	a0 e0       	ldi	r26, 0x00	; 0
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	84 83       	std	Z+4, r24	; 0x04
 5d4:	95 83       	std	Z+5, r25	; 0x05
 5d6:	a6 83       	std	Z+6, r26	; 0x06
 5d8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 5da:	8b e2       	ldi	r24, 0x2B	; 43
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	91 83       	std	Z+1, r25	; 0x01
 5e0:	80 83       	st	Z, r24
 5e2:	85 ec       	ldi	r24, 0xC5	; 197
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	95 87       	std	Z+13, r25	; 0x0d
 5e8:	84 87       	std	Z+12, r24	; 0x0c
 5ea:	84 ec       	ldi	r24, 0xC4	; 196
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	97 87       	std	Z+15, r25	; 0x0f
 5f0:	86 87       	std	Z+14, r24	; 0x0e
 5f2:	80 ec       	ldi	r24, 0xC0	; 192
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	91 8b       	std	Z+17, r25	; 0x11
 5f8:	80 8b       	std	Z+16, r24	; 0x10
 5fa:	81 ec       	ldi	r24, 0xC1	; 193
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	93 8b       	std	Z+19, r25	; 0x13
 600:	82 8b       	std	Z+18, r24	; 0x12
 602:	82 ec       	ldi	r24, 0xC2	; 194
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	95 8b       	std	Z+21, r25	; 0x15
 608:	84 8b       	std	Z+20, r24	; 0x14
 60a:	86 ec       	ldi	r24, 0xC6	; 198
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	97 8b       	std	Z+23, r25	; 0x17
 610:	86 8b       	std	Z+22, r24	; 0x16
 612:	11 8e       	std	Z+25, r1	; 0x19
 614:	12 8e       	std	Z+26, r1	; 0x1a
 616:	13 8e       	std	Z+27, r1	; 0x1b
 618:	14 8e       	std	Z+28, r1	; 0x1c
 61a:	08 95       	ret

0000061c <initVariant>:
 61c:	08 95       	ret

0000061e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 61e:	0e 94 1e 04 	call	0x83c	; 0x83c <init>

	initVariant();
 622:	0e 94 0e 03 	call	0x61c	; 0x61c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 626:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 62a:	cb e7       	ldi	r28, 0x7B	; 123
 62c:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 62e:	0e 94 0d 01 	call	0x21a	; 0x21a <loop>
		if (serialEventRun) serialEventRun();
 632:	20 97       	sbiw	r28, 0x00	; 0
 634:	e1 f3       	breq	.-8      	; 0x62e <main+0x10>
 636:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z14serialEventRunv>
 63a:	f9 cf       	rjmp	.-14     	; 0x62e <main+0x10>

0000063c <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 63c:	cf 92       	push	r12
 63e:	df 92       	push	r13
 640:	ef 92       	push	r14
 642:	ff 92       	push	r15
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	6c 01       	movw	r12, r24
 64e:	7a 01       	movw	r14, r20
 650:	8b 01       	movw	r16, r22
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	ce 15       	cp	r28, r14
 658:	df 05       	cpc	r29, r15
 65a:	81 f0       	breq	.+32     	; 0x67c <_ZN5Print5writeEPKhj+0x40>
 65c:	d8 01       	movw	r26, r16
 65e:	6d 91       	ld	r22, X+
 660:	8d 01       	movw	r16, r26
 662:	d6 01       	movw	r26, r12
 664:	ed 91       	ld	r30, X+
 666:	fc 91       	ld	r31, X
 668:	01 90       	ld	r0, Z+
 66a:	f0 81       	ld	r31, Z
 66c:	e0 2d       	mov	r30, r0
 66e:	c6 01       	movw	r24, r12
 670:	09 95       	icall
 672:	89 2b       	or	r24, r25
 674:	11 f0       	breq	.+4      	; 0x67a <_ZN5Print5writeEPKhj+0x3e>
 676:	21 96       	adiw	r28, 0x01	; 1
 678:	ee cf       	rjmp	.-36     	; 0x656 <_ZN5Print5writeEPKhj+0x1a>
 67a:	7e 01       	movw	r14, r28
 67c:	c7 01       	movw	r24, r14
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	0f 91       	pop	r16
 686:	ff 90       	pop	r15
 688:	ef 90       	pop	r14
 68a:	df 90       	pop	r13
 68c:	cf 90       	pop	r12
 68e:	08 95       	ret

00000690 <_ZN5Print5writeEPKc>:
 690:	61 15       	cp	r22, r1
 692:	71 05       	cpc	r23, r1
 694:	79 f0       	breq	.+30     	; 0x6b4 <_ZN5Print5writeEPKc+0x24>
 696:	fb 01       	movw	r30, r22
 698:	01 90       	ld	r0, Z+
 69a:	00 20       	and	r0, r0
 69c:	e9 f7       	brne	.-6      	; 0x698 <_ZN5Print5writeEPKc+0x8>
 69e:	31 97       	sbiw	r30, 0x01	; 1
 6a0:	af 01       	movw	r20, r30
 6a2:	46 1b       	sub	r20, r22
 6a4:	57 0b       	sbc	r21, r23
 6a6:	dc 01       	movw	r26, r24
 6a8:	ed 91       	ld	r30, X+
 6aa:	fc 91       	ld	r31, X
 6ac:	02 80       	ldd	r0, Z+2	; 0x02
 6ae:	f3 81       	ldd	r31, Z+3	; 0x03
 6b0:	e0 2d       	mov	r30, r0
 6b2:	09 94       	ijmp
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret

000006ba <_ZN5Print7printlnEv>:
 6ba:	69 e3       	ldi	r22, 0x39	; 57
 6bc:	71 e0       	ldi	r23, 0x01	; 1
 6be:	0c 94 48 03 	jmp	0x690	; 0x690 <_ZN5Print5writeEPKc>

000006c2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 6cc:	0e 94 48 03 	call	0x690	; 0x690 <_ZN5Print5writeEPKc>
 6d0:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 6d2:	ce 01       	movw	r24, r28
 6d4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print7printlnEv>
  return n;
}
 6d8:	80 0f       	add	r24, r16
 6da:	91 1f       	adc	r25, r17
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	08 95       	ret

000006e6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 6e6:	1f 92       	push	r1
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	8f 93       	push	r24
 6f6:	9f 93       	push	r25
 6f8:	af 93       	push	r26
 6fa:	bf 93       	push	r27
 6fc:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer0_millis>
 700:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer0_millis+0x1>
 704:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer0_millis+0x2>
 708:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer0_millis+0x3>
 70c:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <timer0_fract>
 710:	23 e0       	ldi	r18, 0x03	; 3
 712:	23 0f       	add	r18, r19
 714:	2d 37       	cpi	r18, 0x7D	; 125
 716:	20 f4       	brcc	.+8      	; 0x720 <__vector_16+0x3a>
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	a1 1d       	adc	r26, r1
 71c:	b1 1d       	adc	r27, r1
 71e:	05 c0       	rjmp	.+10     	; 0x72a <__vector_16+0x44>
 720:	26 e8       	ldi	r18, 0x86	; 134
 722:	23 0f       	add	r18, r19
 724:	02 96       	adiw	r24, 0x02	; 2
 726:	a1 1d       	adc	r26, r1
 728:	b1 1d       	adc	r27, r1
 72a:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <timer0_fract>
 72e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <timer0_millis>
 732:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <timer0_millis+0x1>
 736:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <timer0_millis+0x2>
 73a:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <timer0_millis+0x3>
 73e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <timer0_overflow_count>
 742:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <timer0_overflow_count+0x1>
 746:	a0 91 f3 01 	lds	r26, 0x01F3	; 0x8001f3 <timer0_overflow_count+0x2>
 74a:	b0 91 f4 01 	lds	r27, 0x01F4	; 0x8001f4 <timer0_overflow_count+0x3>
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	a1 1d       	adc	r26, r1
 752:	b1 1d       	adc	r27, r1
 754:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <timer0_overflow_count>
 758:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <timer0_overflow_count+0x1>
 75c:	a0 93 f3 01 	sts	0x01F3, r26	; 0x8001f3 <timer0_overflow_count+0x2>
 760:	b0 93 f4 01 	sts	0x01F4, r27	; 0x8001f4 <timer0_overflow_count+0x3>
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	3f 91       	pop	r19
 76e:	2f 91       	pop	r18
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	0f 90       	pop	r0
 776:	1f 90       	pop	r1
 778:	18 95       	reti

0000077a <micros>:
 77a:	3f b7       	in	r19, 0x3f	; 63
 77c:	f8 94       	cli
 77e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <timer0_overflow_count>
 782:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <timer0_overflow_count+0x1>
 786:	a0 91 f3 01 	lds	r26, 0x01F3	; 0x8001f3 <timer0_overflow_count+0x2>
 78a:	b0 91 f4 01 	lds	r27, 0x01F4	; 0x8001f4 <timer0_overflow_count+0x3>
 78e:	26 b5       	in	r18, 0x26	; 38
 790:	a8 9b       	sbis	0x15, 0	; 21
 792:	05 c0       	rjmp	.+10     	; 0x79e <micros+0x24>
 794:	2f 3f       	cpi	r18, 0xFF	; 255
 796:	19 f0       	breq	.+6      	; 0x79e <micros+0x24>
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	a1 1d       	adc	r26, r1
 79c:	b1 1d       	adc	r27, r1
 79e:	3f bf       	out	0x3f, r19	; 63
 7a0:	ba 2f       	mov	r27, r26
 7a2:	a9 2f       	mov	r26, r25
 7a4:	98 2f       	mov	r25, r24
 7a6:	88 27       	eor	r24, r24
 7a8:	82 0f       	add	r24, r18
 7aa:	91 1d       	adc	r25, r1
 7ac:	a1 1d       	adc	r26, r1
 7ae:	b1 1d       	adc	r27, r1
 7b0:	bc 01       	movw	r22, r24
 7b2:	cd 01       	movw	r24, r26
 7b4:	42 e0       	ldi	r20, 0x02	; 2
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	4a 95       	dec	r20
 7c0:	d1 f7       	brne	.-12     	; 0x7b6 <micros+0x3c>
 7c2:	08 95       	ret

000007c4 <delay>:
 7c4:	8f 92       	push	r8
 7c6:	9f 92       	push	r9
 7c8:	af 92       	push	r10
 7ca:	bf 92       	push	r11
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	6b 01       	movw	r12, r22
 7d6:	7c 01       	movw	r14, r24
 7d8:	0e 94 bd 03 	call	0x77a	; 0x77a <micros>
 7dc:	4b 01       	movw	r8, r22
 7de:	5c 01       	movw	r10, r24
 7e0:	c1 14       	cp	r12, r1
 7e2:	d1 04       	cpc	r13, r1
 7e4:	e1 04       	cpc	r14, r1
 7e6:	f1 04       	cpc	r15, r1
 7e8:	01 f1       	breq	.+64     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7ea:	0e 94 73 05 	call	0xae6	; 0xae6 <yield>
 7ee:	0e 94 bd 03 	call	0x77a	; 0x77a <micros>
 7f2:	dc 01       	movw	r26, r24
 7f4:	cb 01       	movw	r24, r22
 7f6:	88 19       	sub	r24, r8
 7f8:	99 09       	sbc	r25, r9
 7fa:	aa 09       	sbc	r26, r10
 7fc:	bb 09       	sbc	r27, r11
 7fe:	88 3e       	cpi	r24, 0xE8	; 232
 800:	93 40       	sbci	r25, 0x03	; 3
 802:	a1 05       	cpc	r26, r1
 804:	b1 05       	cpc	r27, r1
 806:	60 f3       	brcs	.-40     	; 0x7e0 <delay+0x1c>
 808:	21 e0       	ldi	r18, 0x01	; 1
 80a:	c2 1a       	sub	r12, r18
 80c:	d1 08       	sbc	r13, r1
 80e:	e1 08       	sbc	r14, r1
 810:	f1 08       	sbc	r15, r1
 812:	88 ee       	ldi	r24, 0xE8	; 232
 814:	88 0e       	add	r8, r24
 816:	83 e0       	ldi	r24, 0x03	; 3
 818:	98 1e       	adc	r9, r24
 81a:	a1 1c       	adc	r10, r1
 81c:	b1 1c       	adc	r11, r1
 81e:	c1 14       	cp	r12, r1
 820:	d1 04       	cpc	r13, r1
 822:	e1 04       	cpc	r14, r1
 824:	f1 04       	cpc	r15, r1
 826:	19 f7       	brne	.-58     	; 0x7ee <delay+0x2a>
 828:	db cf       	rjmp	.-74     	; 0x7e0 <delay+0x1c>
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	bf 90       	pop	r11
 834:	af 90       	pop	r10
 836:	9f 90       	pop	r9
 838:	8f 90       	pop	r8
 83a:	08 95       	ret

0000083c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 83c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 83e:	84 b5       	in	r24, 0x24	; 36
 840:	82 60       	ori	r24, 0x02	; 2
 842:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 844:	84 b5       	in	r24, 0x24	; 36
 846:	81 60       	ori	r24, 0x01	; 1
 848:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 84a:	85 b5       	in	r24, 0x25	; 37
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 850:	85 b5       	in	r24, 0x25	; 37
 852:	81 60       	ori	r24, 0x01	; 1
 854:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 856:	ee e6       	ldi	r30, 0x6E	; 110
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	80 81       	ld	r24, Z
 85c:	81 60       	ori	r24, 0x01	; 1
 85e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 860:	e1 e8       	ldi	r30, 0x81	; 129
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 866:	80 81       	ld	r24, Z
 868:	82 60       	ori	r24, 0x02	; 2
 86a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 86c:	80 81       	ld	r24, Z
 86e:	81 60       	ori	r24, 0x01	; 1
 870:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 872:	e0 e8       	ldi	r30, 0x80	; 128
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 87c:	e1 eb       	ldi	r30, 0xB1	; 177
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	84 60       	ori	r24, 0x04	; 4
 884:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 886:	e0 eb       	ldi	r30, 0xB0	; 176
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	81 60       	ori	r24, 0x01	; 1
 88e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 890:	ea e7       	ldi	r30, 0x7A	; 122
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	84 60       	ori	r24, 0x04	; 4
 898:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 89a:	80 81       	ld	r24, Z
 89c:	82 60       	ori	r24, 0x02	; 2
 89e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8a0:	80 81       	ld	r24, Z
 8a2:	81 60       	ori	r24, 0x01	; 1
 8a4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8a6:	80 81       	ld	r24, Z
 8a8:	80 68       	ori	r24, 0x80	; 128
 8aa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 8b0:	08 95       	ret

000008b2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 8b2:	83 30       	cpi	r24, 0x03	; 3
 8b4:	81 f0       	breq	.+32     	; 0x8d6 <turnOffPWM+0x24>
 8b6:	28 f4       	brcc	.+10     	; 0x8c2 <turnOffPWM+0x10>
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	99 f0       	breq	.+38     	; 0x8e2 <turnOffPWM+0x30>
 8bc:	82 30       	cpi	r24, 0x02	; 2
 8be:	a1 f0       	breq	.+40     	; 0x8e8 <turnOffPWM+0x36>
 8c0:	08 95       	ret
 8c2:	87 30       	cpi	r24, 0x07	; 7
 8c4:	a9 f0       	breq	.+42     	; 0x8f0 <turnOffPWM+0x3e>
 8c6:	88 30       	cpi	r24, 0x08	; 8
 8c8:	b9 f0       	breq	.+46     	; 0x8f8 <turnOffPWM+0x46>
 8ca:	84 30       	cpi	r24, 0x04	; 4
 8cc:	d1 f4       	brne	.+52     	; 0x902 <__stack+0x3>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 8ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 8d2:	8f 7d       	andi	r24, 0xDF	; 223
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 8d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 8da:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 8dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 8e0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 8e2:	84 b5       	in	r24, 0x24	; 36
 8e4:	8f 77       	andi	r24, 0x7F	; 127
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 8e8:	84 b5       	in	r24, 0x24	; 36
 8ea:	8f 7d       	andi	r24, 0xDF	; 223
 8ec:	84 bd       	out	0x24, r24	; 36
 8ee:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 8f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 8f4:	8f 77       	andi	r24, 0x7F	; 127
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 8f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 8fc:	8f 7d       	andi	r24, 0xDF	; 223
 8fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 902:	08 95       	ret

00000904 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	fc 01       	movw	r30, r24
 90c:	e4 58       	subi	r30, 0x84	; 132
 90e:	ff 4f       	sbci	r31, 0xFF	; 255
 910:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 912:	fc 01       	movw	r30, r24
 914:	e0 57       	subi	r30, 0x70	; 112
 916:	ff 4f       	sbci	r31, 0xFF	; 255
 918:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 91a:	88 23       	and	r24, r24
 91c:	61 f1       	breq	.+88     	; 0x976 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	fc 01       	movw	r30, r24
 926:	e2 55       	subi	r30, 0x52	; 82
 928:	ff 4f       	sbci	r31, 0xFF	; 255
 92a:	c5 91       	lpm	r28, Z+
 92c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 92e:	fc 01       	movw	r30, r24
 930:	ec 55       	subi	r30, 0x5C	; 92
 932:	ff 4f       	sbci	r31, 0xFF	; 255
 934:	a5 91       	lpm	r26, Z+
 936:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 938:	61 11       	cpse	r22, r1
 93a:	09 c0       	rjmp	.+18     	; 0x94e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 93c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 93e:	f8 94       	cli
		*reg &= ~bit;
 940:	88 81       	ld	r24, Y
 942:	20 95       	com	r18
 944:	82 23       	and	r24, r18
 946:	88 83       	st	Y, r24
		*out &= ~bit;
 948:	ec 91       	ld	r30, X
 94a:	2e 23       	and	r18, r30
 94c:	0b c0       	rjmp	.+22     	; 0x964 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 94e:	62 30       	cpi	r22, 0x02	; 2
 950:	61 f4       	brne	.+24     	; 0x96a <pinMode+0x66>
		uint8_t oldSREG = SREG;
 952:	9f b7       	in	r25, 0x3f	; 63
                cli();
 954:	f8 94       	cli
		*reg &= ~bit;
 956:	88 81       	ld	r24, Y
 958:	32 2f       	mov	r19, r18
 95a:	30 95       	com	r19
 95c:	83 23       	and	r24, r19
 95e:	88 83       	st	Y, r24
		*out |= bit;
 960:	ec 91       	ld	r30, X
 962:	2e 2b       	or	r18, r30
 964:	2c 93       	st	X, r18
		SREG = oldSREG;
 966:	9f bf       	out	0x3f, r25	; 63
 968:	06 c0       	rjmp	.+12     	; 0x976 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 96a:	8f b7       	in	r24, 0x3f	; 63
                cli();
 96c:	f8 94       	cli
		*reg |= bit;
 96e:	e8 81       	ld	r30, Y
 970:	2e 2b       	or	r18, r30
 972:	28 83       	st	Y, r18
		SREG = oldSREG;
 974:	8f bf       	out	0x3f, r24	; 63
	}
}
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	08 95       	ret

0000097c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 982:	28 2f       	mov	r18, r24
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	f9 01       	movw	r30, r18
 988:	e8 59       	subi	r30, 0x98	; 152
 98a:	ff 4f       	sbci	r31, 0xFF	; 255
 98c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 98e:	f9 01       	movw	r30, r18
 990:	e4 58       	subi	r30, 0x84	; 132
 992:	ff 4f       	sbci	r31, 0xFF	; 255
 994:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 996:	f9 01       	movw	r30, r18
 998:	e0 57       	subi	r30, 0x70	; 112
 99a:	ff 4f       	sbci	r31, 0xFF	; 255
 99c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 99e:	cc 23       	and	r28, r28
 9a0:	c1 f0       	breq	.+48     	; 0x9d2 <digitalWrite+0x56>
 9a2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 9a4:	81 11       	cpse	r24, r1
 9a6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <turnOffPWM>

	out = portOutputRegister(port);
 9aa:	ec 2f       	mov	r30, r28
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	ee 0f       	add	r30, r30
 9b0:	ff 1f       	adc	r31, r31
 9b2:	ec 55       	subi	r30, 0x5C	; 92
 9b4:	ff 4f       	sbci	r31, 0xFF	; 255
 9b6:	a5 91       	lpm	r26, Z+
 9b8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 9ba:	9f b7       	in	r25, 0x3f	; 63
	cli();
 9bc:	f8 94       	cli

	if (val == LOW) {
 9be:	11 11       	cpse	r17, r1
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <digitalWrite+0x4e>
		*out &= ~bit;
 9c2:	8c 91       	ld	r24, X
 9c4:	d0 95       	com	r29
 9c6:	d8 23       	and	r29, r24
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <digitalWrite+0x52>
	} else {
		*out |= bit;
 9ca:	ec 91       	ld	r30, X
 9cc:	de 2b       	or	r29, r30
 9ce:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 9d0:	9f bf       	out	0x3f, r25	; 63
}
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	08 95       	ret

000009da <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	if (buffer) free(buffer);
 9da:	fc 01       	movw	r30, r24
 9dc:	80 81       	ld	r24, Z
 9de:	91 81       	ldd	r25, Z+1	; 0x01
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <_ZN6StringD1Ev+0xe>
 9e4:	0c 94 34 06 	jmp	0xc68	; 0xc68 <free>
 9e8:	08 95       	ret

000009ea <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
 9f0:	88 81       	ld	r24, Y
 9f2:	99 81       	ldd	r25, Y+1	; 0x01
 9f4:	00 97       	sbiw	r24, 0x00	; 0
 9f6:	11 f0       	breq	.+4      	; 0x9fc <_ZN6String10invalidateEv+0x12>
 9f8:	0e 94 34 06 	call	0xc68	; 0xc68 <free>
	buffer = NULL;
 9fc:	19 82       	std	Y+1, r1	; 0x01
 9fe:	18 82       	st	Y, r1
	capacity = len = 0;
 a00:	1d 82       	std	Y+5, r1	; 0x05
 a02:	1c 82       	std	Y+4, r1	; 0x04
 a04:	1b 82       	std	Y+3, r1	; 0x03
 a06:	1a 82       	std	Y+2, r1	; 0x02
}
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	08 95       	ret

00000a0e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 a0e:	0f 93       	push	r16
 a10:	1f 93       	push	r17
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	ec 01       	movw	r28, r24
 a18:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 a1a:	6f 5f       	subi	r22, 0xFF	; 255
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	88 81       	ld	r24, Y
 a20:	99 81       	ldd	r25, Y+1	; 0x01
 a22:	0e 94 bd 06 	call	0xd7a	; 0xd7a <realloc>
	if (newbuffer) {
 a26:	00 97       	sbiw	r24, 0x00	; 0
 a28:	31 f0       	breq	.+12     	; 0xa36 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
 a2a:	99 83       	std	Y+1, r25	; 0x01
 a2c:	88 83       	st	Y, r24
		capacity = maxStrLen;
 a2e:	1b 83       	std	Y+3, r17	; 0x03
 a30:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
 a36:	80 e0       	ldi	r24, 0x00	; 0
}
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	08 95       	ret

00000a42 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
 a48:	88 81       	ld	r24, Y
 a4a:	99 81       	ldd	r25, Y+1	; 0x01
 a4c:	89 2b       	or	r24, r25
 a4e:	29 f0       	breq	.+10     	; 0xa5a <_ZN6String7reserveEj+0x18>
 a50:	8a 81       	ldd	r24, Y+2	; 0x02
 a52:	9b 81       	ldd	r25, Y+3	; 0x03
 a54:	86 17       	cp	r24, r22
 a56:	97 07       	cpc	r25, r23
 a58:	60 f4       	brcc	.+24     	; 0xa72 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
 a5a:	ce 01       	movw	r24, r28
 a5c:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN6String12changeBufferEj>
 a60:	88 23       	and	r24, r24
 a62:	41 f0       	breq	.+16     	; 0xa74 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
 a64:	8c 81       	ldd	r24, Y+4	; 0x04
 a66:	9d 81       	ldd	r25, Y+5	; 0x05
 a68:	89 2b       	or	r24, r25
 a6a:	19 f4       	brne	.+6      	; 0xa72 <_ZN6String7reserveEj+0x30>
 a6c:	e8 81       	ld	r30, Y
 a6e:	f9 81       	ldd	r31, Y+1	; 0x01
 a70:	10 82       	st	Z, r1
 a72:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	08 95       	ret

00000a7a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 a7a:	ef 92       	push	r14
 a7c:	ff 92       	push	r15
 a7e:	0f 93       	push	r16
 a80:	1f 93       	push	r17
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	ec 01       	movw	r28, r24
 a88:	7b 01       	movw	r14, r22
 a8a:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
 a8c:	ba 01       	movw	r22, r20
 a8e:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN6String7reserveEj>
 a92:	81 11       	cpse	r24, r1
 a94:	04 c0       	rjmp	.+8      	; 0xa9e <_ZN6String4copyEPKcj+0x24>
		invalidate();
 a96:	ce 01       	movw	r24, r28
 a98:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN6String10invalidateEv>
		return *this;
 a9c:	07 c0       	rjmp	.+14     	; 0xaac <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
 a9e:	1d 83       	std	Y+5, r17	; 0x05
 aa0:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
 aa2:	b7 01       	movw	r22, r14
 aa4:	88 81       	ld	r24, Y
 aa6:	99 81       	ldd	r25, Y+1	; 0x01
 aa8:	0e 94 8c 07 	call	0xf18	; 0xf18 <strcpy>
	return *this;
}
 aac:	ce 01       	movw	r24, r28
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	ff 90       	pop	r15
 ab8:	ef 90       	pop	r14
 aba:	08 95       	ret

00000abc <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 abc:	fc 01       	movw	r30, r24
 abe:	11 82       	std	Z+1, r1	; 0x01
 ac0:	10 82       	st	Z, r1
	capacity = 0;
 ac2:	13 82       	std	Z+3, r1	; 0x03
 ac4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
 ac6:	15 82       	std	Z+5, r1	; 0x05
 ac8:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
 aca:	61 15       	cp	r22, r1
 acc:	71 05       	cpc	r23, r1
 ace:	51 f0       	breq	.+20     	; 0xae4 <_ZN6StringC1EPKc+0x28>
 ad0:	fb 01       	movw	r30, r22
 ad2:	01 90       	ld	r0, Z+
 ad4:	00 20       	and	r0, r0
 ad6:	e9 f7       	brne	.-6      	; 0xad2 <_ZN6StringC1EPKc+0x16>
 ad8:	31 97       	sbiw	r30, 0x01	; 1
 ada:	af 01       	movw	r20, r30
 adc:	46 1b       	sub	r20, r22
 ade:	57 0b       	sbc	r21, r23
 ae0:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_ZN6String4copyEPKcj>
 ae4:	08 95       	ret

00000ae6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 ae6:	08 95       	ret

00000ae8 <__udivmodsi4>:
 ae8:	a1 e2       	ldi	r26, 0x21	; 33
 aea:	1a 2e       	mov	r1, r26
 aec:	aa 1b       	sub	r26, r26
 aee:	bb 1b       	sub	r27, r27
 af0:	fd 01       	movw	r30, r26
 af2:	0d c0       	rjmp	.+26     	; 0xb0e <__udivmodsi4_ep>

00000af4 <__udivmodsi4_loop>:
 af4:	aa 1f       	adc	r26, r26
 af6:	bb 1f       	adc	r27, r27
 af8:	ee 1f       	adc	r30, r30
 afa:	ff 1f       	adc	r31, r31
 afc:	a2 17       	cp	r26, r18
 afe:	b3 07       	cpc	r27, r19
 b00:	e4 07       	cpc	r30, r20
 b02:	f5 07       	cpc	r31, r21
 b04:	20 f0       	brcs	.+8      	; 0xb0e <__udivmodsi4_ep>
 b06:	a2 1b       	sub	r26, r18
 b08:	b3 0b       	sbc	r27, r19
 b0a:	e4 0b       	sbc	r30, r20
 b0c:	f5 0b       	sbc	r31, r21

00000b0e <__udivmodsi4_ep>:
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	1a 94       	dec	r1
 b18:	69 f7       	brne	.-38     	; 0xaf4 <__udivmodsi4_loop>
 b1a:	60 95       	com	r22
 b1c:	70 95       	com	r23
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	9b 01       	movw	r18, r22
 b24:	ac 01       	movw	r20, r24
 b26:	bd 01       	movw	r22, r26
 b28:	cf 01       	movw	r24, r30
 b2a:	08 95       	ret

00000b2c <__tablejump2__>:
 b2c:	ee 0f       	add	r30, r30
 b2e:	ff 1f       	adc	r31, r31
 b30:	05 90       	lpm	r0, Z+
 b32:	f4 91       	lpm	r31, Z
 b34:	e0 2d       	mov	r30, r0
 b36:	09 94       	ijmp

00000b38 <malloc>:
 b38:	0f 93       	push	r16
 b3a:	1f 93       	push	r17
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	82 30       	cpi	r24, 0x02	; 2
 b42:	91 05       	cpc	r25, r1
 b44:	10 f4       	brcc	.+4      	; 0xb4a <malloc+0x12>
 b46:	82 e0       	ldi	r24, 0x02	; 2
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <__flp>
 b4e:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <__flp+0x1>
 b52:	20 e0       	ldi	r18, 0x00	; 0
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	a0 e0       	ldi	r26, 0x00	; 0
 b58:	b0 e0       	ldi	r27, 0x00	; 0
 b5a:	30 97       	sbiw	r30, 0x00	; 0
 b5c:	19 f1       	breq	.+70     	; 0xba4 <malloc+0x6c>
 b5e:	40 81       	ld	r20, Z
 b60:	51 81       	ldd	r21, Z+1	; 0x01
 b62:	02 81       	ldd	r16, Z+2	; 0x02
 b64:	13 81       	ldd	r17, Z+3	; 0x03
 b66:	48 17       	cp	r20, r24
 b68:	59 07       	cpc	r21, r25
 b6a:	c8 f0       	brcs	.+50     	; 0xb9e <malloc+0x66>
 b6c:	84 17       	cp	r24, r20
 b6e:	95 07       	cpc	r25, r21
 b70:	69 f4       	brne	.+26     	; 0xb8c <malloc+0x54>
 b72:	10 97       	sbiw	r26, 0x00	; 0
 b74:	31 f0       	breq	.+12     	; 0xb82 <malloc+0x4a>
 b76:	12 96       	adiw	r26, 0x02	; 2
 b78:	0c 93       	st	X, r16
 b7a:	12 97       	sbiw	r26, 0x02	; 2
 b7c:	13 96       	adiw	r26, 0x03	; 3
 b7e:	1c 93       	st	X, r17
 b80:	27 c0       	rjmp	.+78     	; 0xbd0 <malloc+0x98>
 b82:	00 93 f7 01 	sts	0x01F7, r16	; 0x8001f7 <__flp>
 b86:	10 93 f8 01 	sts	0x01F8, r17	; 0x8001f8 <__flp+0x1>
 b8a:	22 c0       	rjmp	.+68     	; 0xbd0 <malloc+0x98>
 b8c:	21 15       	cp	r18, r1
 b8e:	31 05       	cpc	r19, r1
 b90:	19 f0       	breq	.+6      	; 0xb98 <malloc+0x60>
 b92:	42 17       	cp	r20, r18
 b94:	53 07       	cpc	r21, r19
 b96:	18 f4       	brcc	.+6      	; 0xb9e <malloc+0x66>
 b98:	9a 01       	movw	r18, r20
 b9a:	bd 01       	movw	r22, r26
 b9c:	ef 01       	movw	r28, r30
 b9e:	df 01       	movw	r26, r30
 ba0:	f8 01       	movw	r30, r16
 ba2:	db cf       	rjmp	.-74     	; 0xb5a <malloc+0x22>
 ba4:	21 15       	cp	r18, r1
 ba6:	31 05       	cpc	r19, r1
 ba8:	f9 f0       	breq	.+62     	; 0xbe8 <malloc+0xb0>
 baa:	28 1b       	sub	r18, r24
 bac:	39 0b       	sbc	r19, r25
 bae:	24 30       	cpi	r18, 0x04	; 4
 bb0:	31 05       	cpc	r19, r1
 bb2:	80 f4       	brcc	.+32     	; 0xbd4 <malloc+0x9c>
 bb4:	8a 81       	ldd	r24, Y+2	; 0x02
 bb6:	9b 81       	ldd	r25, Y+3	; 0x03
 bb8:	61 15       	cp	r22, r1
 bba:	71 05       	cpc	r23, r1
 bbc:	21 f0       	breq	.+8      	; 0xbc6 <malloc+0x8e>
 bbe:	fb 01       	movw	r30, r22
 bc0:	93 83       	std	Z+3, r25	; 0x03
 bc2:	82 83       	std	Z+2, r24	; 0x02
 bc4:	04 c0       	rjmp	.+8      	; 0xbce <malloc+0x96>
 bc6:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <__flp+0x1>
 bca:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <__flp>
 bce:	fe 01       	movw	r30, r28
 bd0:	32 96       	adiw	r30, 0x02	; 2
 bd2:	44 c0       	rjmp	.+136    	; 0xc5c <malloc+0x124>
 bd4:	fe 01       	movw	r30, r28
 bd6:	e2 0f       	add	r30, r18
 bd8:	f3 1f       	adc	r31, r19
 bda:	81 93       	st	Z+, r24
 bdc:	91 93       	st	Z+, r25
 bde:	22 50       	subi	r18, 0x02	; 2
 be0:	31 09       	sbc	r19, r1
 be2:	39 83       	std	Y+1, r19	; 0x01
 be4:	28 83       	st	Y, r18
 be6:	3a c0       	rjmp	.+116    	; 0xc5c <malloc+0x124>
 be8:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
 bec:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
 bf0:	23 2b       	or	r18, r19
 bf2:	41 f4       	brne	.+16     	; 0xc04 <malloc+0xcc>
 bf4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 bf8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 bfc:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <__brkval+0x1>
 c00:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <__brkval>
 c04:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c08:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 c0c:	21 15       	cp	r18, r1
 c0e:	31 05       	cpc	r19, r1
 c10:	41 f4       	brne	.+16     	; 0xc22 <malloc+0xea>
 c12:	2d b7       	in	r18, 0x3d	; 61
 c14:	3e b7       	in	r19, 0x3e	; 62
 c16:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c1a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c1e:	24 1b       	sub	r18, r20
 c20:	35 0b       	sbc	r19, r21
 c22:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <__brkval>
 c26:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <__brkval+0x1>
 c2a:	e2 17       	cp	r30, r18
 c2c:	f3 07       	cpc	r31, r19
 c2e:	a0 f4       	brcc	.+40     	; 0xc58 <malloc+0x120>
 c30:	2e 1b       	sub	r18, r30
 c32:	3f 0b       	sbc	r19, r31
 c34:	28 17       	cp	r18, r24
 c36:	39 07       	cpc	r19, r25
 c38:	78 f0       	brcs	.+30     	; 0xc58 <malloc+0x120>
 c3a:	ac 01       	movw	r20, r24
 c3c:	4e 5f       	subi	r20, 0xFE	; 254
 c3e:	5f 4f       	sbci	r21, 0xFF	; 255
 c40:	24 17       	cp	r18, r20
 c42:	35 07       	cpc	r19, r21
 c44:	48 f0       	brcs	.+18     	; 0xc58 <malloc+0x120>
 c46:	4e 0f       	add	r20, r30
 c48:	5f 1f       	adc	r21, r31
 c4a:	50 93 f6 01 	sts	0x01F6, r21	; 0x8001f6 <__brkval+0x1>
 c4e:	40 93 f5 01 	sts	0x01F5, r20	; 0x8001f5 <__brkval>
 c52:	81 93       	st	Z+, r24
 c54:	91 93       	st	Z+, r25
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <malloc+0x124>
 c58:	e0 e0       	ldi	r30, 0x00	; 0
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	cf 01       	movw	r24, r30
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	1f 91       	pop	r17
 c64:	0f 91       	pop	r16
 c66:	08 95       	ret

00000c68 <free>:
 c68:	cf 93       	push	r28
 c6a:	df 93       	push	r29
 c6c:	00 97       	sbiw	r24, 0x00	; 0
 c6e:	09 f4       	brne	.+2      	; 0xc72 <free+0xa>
 c70:	81 c0       	rjmp	.+258    	; 0xd74 <free+0x10c>
 c72:	fc 01       	movw	r30, r24
 c74:	32 97       	sbiw	r30, 0x02	; 2
 c76:	13 82       	std	Z+3, r1	; 0x03
 c78:	12 82       	std	Z+2, r1	; 0x02
 c7a:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <__flp>
 c7e:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <__flp+0x1>
 c82:	10 97       	sbiw	r26, 0x00	; 0
 c84:	81 f4       	brne	.+32     	; 0xca6 <free+0x3e>
 c86:	20 81       	ld	r18, Z
 c88:	31 81       	ldd	r19, Z+1	; 0x01
 c8a:	82 0f       	add	r24, r18
 c8c:	93 1f       	adc	r25, r19
 c8e:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
 c92:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
 c96:	28 17       	cp	r18, r24
 c98:	39 07       	cpc	r19, r25
 c9a:	51 f5       	brne	.+84     	; 0xcf0 <free+0x88>
 c9c:	f0 93 f6 01 	sts	0x01F6, r31	; 0x8001f6 <__brkval+0x1>
 ca0:	e0 93 f5 01 	sts	0x01F5, r30	; 0x8001f5 <__brkval>
 ca4:	67 c0       	rjmp	.+206    	; 0xd74 <free+0x10c>
 ca6:	ed 01       	movw	r28, r26
 ca8:	20 e0       	ldi	r18, 0x00	; 0
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	ce 17       	cp	r28, r30
 cae:	df 07       	cpc	r29, r31
 cb0:	40 f4       	brcc	.+16     	; 0xcc2 <free+0x5a>
 cb2:	4a 81       	ldd	r20, Y+2	; 0x02
 cb4:	5b 81       	ldd	r21, Y+3	; 0x03
 cb6:	9e 01       	movw	r18, r28
 cb8:	41 15       	cp	r20, r1
 cba:	51 05       	cpc	r21, r1
 cbc:	f1 f0       	breq	.+60     	; 0xcfa <free+0x92>
 cbe:	ea 01       	movw	r28, r20
 cc0:	f5 cf       	rjmp	.-22     	; 0xcac <free+0x44>
 cc2:	d3 83       	std	Z+3, r29	; 0x03
 cc4:	c2 83       	std	Z+2, r28	; 0x02
 cc6:	40 81       	ld	r20, Z
 cc8:	51 81       	ldd	r21, Z+1	; 0x01
 cca:	84 0f       	add	r24, r20
 ccc:	95 1f       	adc	r25, r21
 cce:	c8 17       	cp	r28, r24
 cd0:	d9 07       	cpc	r29, r25
 cd2:	59 f4       	brne	.+22     	; 0xcea <free+0x82>
 cd4:	88 81       	ld	r24, Y
 cd6:	99 81       	ldd	r25, Y+1	; 0x01
 cd8:	84 0f       	add	r24, r20
 cda:	95 1f       	adc	r25, r21
 cdc:	02 96       	adiw	r24, 0x02	; 2
 cde:	91 83       	std	Z+1, r25	; 0x01
 ce0:	80 83       	st	Z, r24
 ce2:	8a 81       	ldd	r24, Y+2	; 0x02
 ce4:	9b 81       	ldd	r25, Y+3	; 0x03
 ce6:	93 83       	std	Z+3, r25	; 0x03
 ce8:	82 83       	std	Z+2, r24	; 0x02
 cea:	21 15       	cp	r18, r1
 cec:	31 05       	cpc	r19, r1
 cee:	29 f4       	brne	.+10     	; 0xcfa <free+0x92>
 cf0:	f0 93 f8 01 	sts	0x01F8, r31	; 0x8001f8 <__flp+0x1>
 cf4:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <__flp>
 cf8:	3d c0       	rjmp	.+122    	; 0xd74 <free+0x10c>
 cfa:	e9 01       	movw	r28, r18
 cfc:	fb 83       	std	Y+3, r31	; 0x03
 cfe:	ea 83       	std	Y+2, r30	; 0x02
 d00:	49 91       	ld	r20, Y+
 d02:	59 91       	ld	r21, Y+
 d04:	c4 0f       	add	r28, r20
 d06:	d5 1f       	adc	r29, r21
 d08:	ec 17       	cp	r30, r28
 d0a:	fd 07       	cpc	r31, r29
 d0c:	61 f4       	brne	.+24     	; 0xd26 <free+0xbe>
 d0e:	80 81       	ld	r24, Z
 d10:	91 81       	ldd	r25, Z+1	; 0x01
 d12:	84 0f       	add	r24, r20
 d14:	95 1f       	adc	r25, r21
 d16:	02 96       	adiw	r24, 0x02	; 2
 d18:	e9 01       	movw	r28, r18
 d1a:	99 83       	std	Y+1, r25	; 0x01
 d1c:	88 83       	st	Y, r24
 d1e:	82 81       	ldd	r24, Z+2	; 0x02
 d20:	93 81       	ldd	r25, Z+3	; 0x03
 d22:	9b 83       	std	Y+3, r25	; 0x03
 d24:	8a 83       	std	Y+2, r24	; 0x02
 d26:	e0 e0       	ldi	r30, 0x00	; 0
 d28:	f0 e0       	ldi	r31, 0x00	; 0
 d2a:	12 96       	adiw	r26, 0x02	; 2
 d2c:	8d 91       	ld	r24, X+
 d2e:	9c 91       	ld	r25, X
 d30:	13 97       	sbiw	r26, 0x03	; 3
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	19 f0       	breq	.+6      	; 0xd3c <free+0xd4>
 d36:	fd 01       	movw	r30, r26
 d38:	dc 01       	movw	r26, r24
 d3a:	f7 cf       	rjmp	.-18     	; 0xd2a <free+0xc2>
 d3c:	8d 91       	ld	r24, X+
 d3e:	9c 91       	ld	r25, X
 d40:	11 97       	sbiw	r26, 0x01	; 1
 d42:	9d 01       	movw	r18, r26
 d44:	2e 5f       	subi	r18, 0xFE	; 254
 d46:	3f 4f       	sbci	r19, 0xFF	; 255
 d48:	82 0f       	add	r24, r18
 d4a:	93 1f       	adc	r25, r19
 d4c:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
 d50:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
 d54:	28 17       	cp	r18, r24
 d56:	39 07       	cpc	r19, r25
 d58:	69 f4       	brne	.+26     	; 0xd74 <free+0x10c>
 d5a:	30 97       	sbiw	r30, 0x00	; 0
 d5c:	29 f4       	brne	.+10     	; 0xd68 <free+0x100>
 d5e:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <__flp+0x1>
 d62:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <__flp>
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <free+0x104>
 d68:	13 82       	std	Z+3, r1	; 0x03
 d6a:	12 82       	std	Z+2, r1	; 0x02
 d6c:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <__brkval+0x1>
 d70:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <__brkval>
 d74:	df 91       	pop	r29
 d76:	cf 91       	pop	r28
 d78:	08 95       	ret

00000d7a <realloc>:
 d7a:	a0 e0       	ldi	r26, 0x00	; 0
 d7c:	b0 e0       	ldi	r27, 0x00	; 0
 d7e:	e3 ec       	ldi	r30, 0xC3	; 195
 d80:	f6 e0       	ldi	r31, 0x06	; 6
 d82:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__prologue_saves__+0x8>
 d86:	ec 01       	movw	r28, r24
 d88:	00 97       	sbiw	r24, 0x00	; 0
 d8a:	21 f4       	brne	.+8      	; 0xd94 <realloc+0x1a>
 d8c:	cb 01       	movw	r24, r22
 d8e:	0e 94 9c 05 	call	0xb38	; 0xb38 <malloc>
 d92:	b4 c0       	rjmp	.+360    	; 0xefc <realloc+0x182>
 d94:	fc 01       	movw	r30, r24
 d96:	e6 0f       	add	r30, r22
 d98:	f7 1f       	adc	r31, r23
 d9a:	9c 01       	movw	r18, r24
 d9c:	22 50       	subi	r18, 0x02	; 2
 d9e:	31 09       	sbc	r19, r1
 da0:	e2 17       	cp	r30, r18
 da2:	f3 07       	cpc	r31, r19
 da4:	08 f4       	brcc	.+2      	; 0xda8 <realloc+0x2e>
 da6:	a8 c0       	rjmp	.+336    	; 0xef8 <realloc+0x17e>
 da8:	d9 01       	movw	r26, r18
 daa:	0d 91       	ld	r16, X+
 dac:	1c 91       	ld	r17, X
 dae:	11 97       	sbiw	r26, 0x01	; 1
 db0:	06 17       	cp	r16, r22
 db2:	17 07       	cpc	r17, r23
 db4:	b0 f0       	brcs	.+44     	; 0xde2 <realloc+0x68>
 db6:	05 30       	cpi	r16, 0x05	; 5
 db8:	11 05       	cpc	r17, r1
 dba:	08 f4       	brcc	.+2      	; 0xdbe <realloc+0x44>
 dbc:	9b c0       	rjmp	.+310    	; 0xef4 <realloc+0x17a>
 dbe:	c8 01       	movw	r24, r16
 dc0:	04 97       	sbiw	r24, 0x04	; 4
 dc2:	86 17       	cp	r24, r22
 dc4:	97 07       	cpc	r25, r23
 dc6:	08 f4       	brcc	.+2      	; 0xdca <realloc+0x50>
 dc8:	95 c0       	rjmp	.+298    	; 0xef4 <realloc+0x17a>
 dca:	02 50       	subi	r16, 0x02	; 2
 dcc:	11 09       	sbc	r17, r1
 dce:	06 1b       	sub	r16, r22
 dd0:	17 0b       	sbc	r17, r23
 dd2:	01 93       	st	Z+, r16
 dd4:	11 93       	st	Z+, r17
 dd6:	6d 93       	st	X+, r22
 dd8:	7c 93       	st	X, r23
 dda:	cf 01       	movw	r24, r30
 ddc:	0e 94 34 06 	call	0xc68	; 0xc68 <free>
 de0:	89 c0       	rjmp	.+274    	; 0xef4 <realloc+0x17a>
 de2:	5b 01       	movw	r10, r22
 de4:	a0 1a       	sub	r10, r16
 de6:	b1 0a       	sbc	r11, r17
 de8:	4c 01       	movw	r8, r24
 dea:	80 0e       	add	r8, r16
 dec:	91 1e       	adc	r9, r17
 dee:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <__flp>
 df2:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <__flp+0x1>
 df6:	61 2c       	mov	r6, r1
 df8:	71 2c       	mov	r7, r1
 dfa:	e1 2c       	mov	r14, r1
 dfc:	f1 2c       	mov	r15, r1
 dfe:	10 97       	sbiw	r26, 0x00	; 0
 e00:	09 f4       	brne	.+2      	; 0xe04 <realloc+0x8a>
 e02:	46 c0       	rjmp	.+140    	; 0xe90 <realloc+0x116>
 e04:	8d 91       	ld	r24, X+
 e06:	9c 91       	ld	r25, X
 e08:	11 97       	sbiw	r26, 0x01	; 1
 e0a:	a8 15       	cp	r26, r8
 e0c:	b9 05       	cpc	r27, r9
 e0e:	b1 f5       	brne	.+108    	; 0xe7c <realloc+0x102>
 e10:	6c 01       	movw	r12, r24
 e12:	42 e0       	ldi	r20, 0x02	; 2
 e14:	c4 0e       	add	r12, r20
 e16:	d1 1c       	adc	r13, r1
 e18:	ca 14       	cp	r12, r10
 e1a:	db 04       	cpc	r13, r11
 e1c:	78 f1       	brcs	.+94     	; 0xe7c <realloc+0x102>
 e1e:	4c 01       	movw	r8, r24
 e20:	8a 18       	sub	r8, r10
 e22:	9b 08       	sbc	r9, r11
 e24:	64 01       	movw	r12, r8
 e26:	42 e0       	ldi	r20, 0x02	; 2
 e28:	c4 0e       	add	r12, r20
 e2a:	d1 1c       	adc	r13, r1
 e2c:	12 96       	adiw	r26, 0x02	; 2
 e2e:	bc 90       	ld	r11, X
 e30:	12 97       	sbiw	r26, 0x02	; 2
 e32:	13 96       	adiw	r26, 0x03	; 3
 e34:	ac 91       	ld	r26, X
 e36:	b5 e0       	ldi	r27, 0x05	; 5
 e38:	cb 16       	cp	r12, r27
 e3a:	d1 04       	cpc	r13, r1
 e3c:	40 f0       	brcs	.+16     	; 0xe4e <realloc+0xd4>
 e3e:	b2 82       	std	Z+2, r11	; 0x02
 e40:	a3 83       	std	Z+3, r26	; 0x03
 e42:	91 82       	std	Z+1, r9	; 0x01
 e44:	80 82       	st	Z, r8
 e46:	d9 01       	movw	r26, r18
 e48:	6d 93       	st	X+, r22
 e4a:	7c 93       	st	X, r23
 e4c:	09 c0       	rjmp	.+18     	; 0xe60 <realloc+0xe6>
 e4e:	0e 5f       	subi	r16, 0xFE	; 254
 e50:	1f 4f       	sbci	r17, 0xFF	; 255
 e52:	80 0f       	add	r24, r16
 e54:	91 1f       	adc	r25, r17
 e56:	f9 01       	movw	r30, r18
 e58:	91 83       	std	Z+1, r25	; 0x01
 e5a:	80 83       	st	Z, r24
 e5c:	eb 2d       	mov	r30, r11
 e5e:	fa 2f       	mov	r31, r26
 e60:	e1 14       	cp	r14, r1
 e62:	f1 04       	cpc	r15, r1
 e64:	31 f0       	breq	.+12     	; 0xe72 <realloc+0xf8>
 e66:	d7 01       	movw	r26, r14
 e68:	13 96       	adiw	r26, 0x03	; 3
 e6a:	fc 93       	st	X, r31
 e6c:	ee 93       	st	-X, r30
 e6e:	12 97       	sbiw	r26, 0x02	; 2
 e70:	41 c0       	rjmp	.+130    	; 0xef4 <realloc+0x17a>
 e72:	f0 93 f8 01 	sts	0x01F8, r31	; 0x8001f8 <__flp+0x1>
 e76:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <__flp>
 e7a:	3c c0       	rjmp	.+120    	; 0xef4 <realloc+0x17a>
 e7c:	68 16       	cp	r6, r24
 e7e:	79 06       	cpc	r7, r25
 e80:	08 f4       	brcc	.+2      	; 0xe84 <realloc+0x10a>
 e82:	3c 01       	movw	r6, r24
 e84:	7d 01       	movw	r14, r26
 e86:	12 96       	adiw	r26, 0x02	; 2
 e88:	0d 90       	ld	r0, X+
 e8a:	bc 91       	ld	r27, X
 e8c:	a0 2d       	mov	r26, r0
 e8e:	b7 cf       	rjmp	.-146    	; 0xdfe <realloc+0x84>
 e90:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <__brkval>
 e94:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <__brkval+0x1>
 e98:	88 16       	cp	r8, r24
 e9a:	99 06       	cpc	r9, r25
 e9c:	e1 f4       	brne	.+56     	; 0xed6 <realloc+0x15c>
 e9e:	66 16       	cp	r6, r22
 ea0:	77 06       	cpc	r7, r23
 ea2:	c8 f4       	brcc	.+50     	; 0xed6 <realloc+0x15c>
 ea4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 ea8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 eac:	00 97       	sbiw	r24, 0x00	; 0
 eae:	41 f4       	brne	.+16     	; 0xec0 <realloc+0x146>
 eb0:	8d b7       	in	r24, 0x3d	; 61
 eb2:	9e b7       	in	r25, 0x3e	; 62
 eb4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 eb8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ebc:	84 1b       	sub	r24, r20
 ebe:	95 0b       	sbc	r25, r21
 ec0:	e8 17       	cp	r30, r24
 ec2:	f9 07       	cpc	r31, r25
 ec4:	c8 f4       	brcc	.+50     	; 0xef8 <realloc+0x17e>
 ec6:	f0 93 f6 01 	sts	0x01F6, r31	; 0x8001f6 <__brkval+0x1>
 eca:	e0 93 f5 01 	sts	0x01F5, r30	; 0x8001f5 <__brkval>
 ece:	f9 01       	movw	r30, r18
 ed0:	71 83       	std	Z+1, r23	; 0x01
 ed2:	60 83       	st	Z, r22
 ed4:	0f c0       	rjmp	.+30     	; 0xef4 <realloc+0x17a>
 ed6:	cb 01       	movw	r24, r22
 ed8:	0e 94 9c 05 	call	0xb38	; 0xb38 <malloc>
 edc:	7c 01       	movw	r14, r24
 ede:	00 97       	sbiw	r24, 0x00	; 0
 ee0:	59 f0       	breq	.+22     	; 0xef8 <realloc+0x17e>
 ee2:	a8 01       	movw	r20, r16
 ee4:	be 01       	movw	r22, r28
 ee6:	0e 94 83 07 	call	0xf06	; 0xf06 <memcpy>
 eea:	ce 01       	movw	r24, r28
 eec:	0e 94 34 06 	call	0xc68	; 0xc68 <free>
 ef0:	c7 01       	movw	r24, r14
 ef2:	04 c0       	rjmp	.+8      	; 0xefc <realloc+0x182>
 ef4:	ce 01       	movw	r24, r28
 ef6:	02 c0       	rjmp	.+4      	; 0xefc <realloc+0x182>
 ef8:	80 e0       	ldi	r24, 0x00	; 0
 efa:	90 e0       	ldi	r25, 0x00	; 0
 efc:	cd b7       	in	r28, 0x3d	; 61
 efe:	de b7       	in	r29, 0x3e	; 62
 f00:	ee e0       	ldi	r30, 0x0E	; 14
 f02:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__epilogue_restores__+0x8>

00000f06 <memcpy>:
 f06:	fb 01       	movw	r30, r22
 f08:	dc 01       	movw	r26, r24
 f0a:	02 c0       	rjmp	.+4      	; 0xf10 <memcpy+0xa>
 f0c:	01 90       	ld	r0, Z+
 f0e:	0d 92       	st	X+, r0
 f10:	41 50       	subi	r20, 0x01	; 1
 f12:	50 40       	sbci	r21, 0x00	; 0
 f14:	d8 f7       	brcc	.-10     	; 0xf0c <memcpy+0x6>
 f16:	08 95       	ret

00000f18 <strcpy>:
 f18:	fb 01       	movw	r30, r22
 f1a:	dc 01       	movw	r26, r24
 f1c:	01 90       	ld	r0, Z+
 f1e:	0d 92       	st	X+, r0
 f20:	00 20       	and	r0, r0
 f22:	e1 f7       	brne	.-8      	; 0xf1c <strcpy+0x4>
 f24:	08 95       	ret

00000f26 <__prologue_saves__>:
 f26:	2f 92       	push	r2
 f28:	3f 92       	push	r3
 f2a:	4f 92       	push	r4
 f2c:	5f 92       	push	r5
 f2e:	6f 92       	push	r6
 f30:	7f 92       	push	r7
 f32:	8f 92       	push	r8
 f34:	9f 92       	push	r9
 f36:	af 92       	push	r10
 f38:	bf 92       	push	r11
 f3a:	cf 92       	push	r12
 f3c:	df 92       	push	r13
 f3e:	ef 92       	push	r14
 f40:	ff 92       	push	r15
 f42:	0f 93       	push	r16
 f44:	1f 93       	push	r17
 f46:	cf 93       	push	r28
 f48:	df 93       	push	r29
 f4a:	cd b7       	in	r28, 0x3d	; 61
 f4c:	de b7       	in	r29, 0x3e	; 62
 f4e:	ca 1b       	sub	r28, r26
 f50:	db 0b       	sbc	r29, r27
 f52:	0f b6       	in	r0, 0x3f	; 63
 f54:	f8 94       	cli
 f56:	de bf       	out	0x3e, r29	; 62
 f58:	0f be       	out	0x3f, r0	; 63
 f5a:	cd bf       	out	0x3d, r28	; 61
 f5c:	09 94       	ijmp

00000f5e <__epilogue_restores__>:
 f5e:	2a 88       	ldd	r2, Y+18	; 0x12
 f60:	39 88       	ldd	r3, Y+17	; 0x11
 f62:	48 88       	ldd	r4, Y+16	; 0x10
 f64:	5f 84       	ldd	r5, Y+15	; 0x0f
 f66:	6e 84       	ldd	r6, Y+14	; 0x0e
 f68:	7d 84       	ldd	r7, Y+13	; 0x0d
 f6a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f6c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f6e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f70:	b9 84       	ldd	r11, Y+9	; 0x09
 f72:	c8 84       	ldd	r12, Y+8	; 0x08
 f74:	df 80       	ldd	r13, Y+7	; 0x07
 f76:	ee 80       	ldd	r14, Y+6	; 0x06
 f78:	fd 80       	ldd	r15, Y+5	; 0x05
 f7a:	0c 81       	ldd	r16, Y+4	; 0x04
 f7c:	1b 81       	ldd	r17, Y+3	; 0x03
 f7e:	aa 81       	ldd	r26, Y+2	; 0x02
 f80:	b9 81       	ldd	r27, Y+1	; 0x01
 f82:	ce 0f       	add	r28, r30
 f84:	d1 1d       	adc	r29, r1
 f86:	0f b6       	in	r0, 0x3f	; 63
 f88:	f8 94       	cli
 f8a:	de bf       	out	0x3e, r29	; 62
 f8c:	0f be       	out	0x3f, r0	; 63
 f8e:	cd bf       	out	0x3d, r28	; 61
 f90:	ed 01       	movw	r28, r26
 f92:	08 95       	ret

00000f94 <__do_global_dtors>:
 f94:	10 e0       	ldi	r17, 0x00	; 0
 f96:	ce e5       	ldi	r28, 0x5E	; 94
 f98:	d0 e0       	ldi	r29, 0x00	; 0
 f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <__do_global_dtors+0x10>
 f9c:	fe 01       	movw	r30, r28
 f9e:	0e 94 96 05 	call	0xb2c	; 0xb2c <__tablejump2__>
 fa2:	21 96       	adiw	r28, 0x01	; 1
 fa4:	cf 35       	cpi	r28, 0x5F	; 95
 fa6:	d1 07       	cpc	r29, r17
 fa8:	c9 f7       	brne	.-14     	; 0xf9c <__do_global_dtors+0x8>
 faa:	f8 94       	cli

00000fac <__stop_program>:
 fac:	ff cf       	rjmp	.-2      	; 0xfac <__stop_program>
